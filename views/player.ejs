<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/css/stylesheet.css?v=<%= version || 0 %>">
  <link rel="shortcut icon" type="image/x-icon" href="/img/logo.png">

  <script src="/external/master.js?v=<%= version || 0 %>"></script>

  <script>
    let tasksBeforeLoading = ["checkWebPSupport", "fetchLanguageFile", "DOMContentLoaded"];

/* Begin generation of the page if all tasks are completed. If not, remove the task from the list of tasks to complete.
 * This is used to ensure that all tasks are completed before the page is generated.
 * @param {string} task - The task that was completed
 */
    function beginGeneration(task) {
      if (tasksBeforeLoading.includes(task)) {
        tasksBeforeLoading.splice(tasksBeforeLoading.indexOf(task), 1);
        console.log(`Task ${task} completed (${performance.now()}ms); remaining tasks: ${tasksBeforeLoading}`);

        if (tasksBeforeLoading.length == 0) {
          switchStats(currentGamemode);
          document.documentElement.style.setProperty('--accent', getComputedStyle(document.documentElement).getPropertyValue('--accent-' + currentGamemode));

          updateTranslations();
          insertLoadedData();
          document.getElementById("flex-container-" + currentGamemode).classList.remove("unloaded");
          document.getElementById("header-name").classList.remove("unloaded");
        }
      } else {
        console.log(`Task ${task} was already completed or is not a task; remaining tasks: ${tasksBeforeLoading}`);
      }

    }
  </script>
  <script src="/external/language.js?v=<%= version || 0 %>"></script>

  <script src="/external/webptest.js?v=<%= version || 0 %>" type="module"></script>
  <script src="/external/skinview3d.bundle.js?v=<%= version || 0 %>" type="module"></script>
  <script src="/external/purify.min.js?v=<%= version || 0 %>"></script>
  <script src="/external/minecrafttext.js?v=<%= version || 0 %>"></script>
  <script src="/external/calculations.js?v=<%= version || 0 %>"></script>
  <script src="/external/games.js?v=<%= version || 0 %>"></script>
  <script src="/external/gamenames.js?v=<%= version || 0 %>"></script>

  <meta name="theme-color" content="#f6adc6">
  <meta property="og:site_name" content="nadeshiko.io">
  <meta name='twitter:card' content='summary_large_image' />

  <meta property='og:image' content='<%= metaImageURL %>' />
  <meta property="twitter:image" content="<%= metaImageURL %>">

  <% if (playerData && playerData.profile) { %>
  <title><%- (playerData["profile"]["tagged_name"]).replace(/ยง[A-Fa-f0-9]/g, "") %> | nadeshiko.io</title>
  <% } else { %>
  <title><%- (playerData["name"]) %> | nadeshiko.io</title> <!-- Fallback in case no stats -->
  <% } %>
  <meta name="description" content="<%= metaDescription %>">
</head>

<body>
  <div class="background" id="background1"></div>
  <div class="background" id="background2" style="opacity: 0"></div>
  <div class="background-filter"></div>

  <div class="nadeshiko-wrapper">
    <header>
      <%- include('partials/header') %>
      <div class="header header2"> <!-- secondary header for game bar -->
        <div class="header-left">
          <p class="header-name unloaded" id="header-name"><span class="mc">Unknown</span></p>
        </div>
        <div class="header-right" id="game-buttons">
          <p class="header-game" onclick="switchStats('network')" id="button-network" data-t="games.network">Network</p>
          <p class="header-game" onclick="switchStats('bedwars')" id="button-bedwars" data-t="games.bedwars">Bed Wars</p>
          <p class="header-game" onclick="switchStats('duels')" id="button-duels" data-t="games.duels">Duels</p>
          <p class="header-game" onclick="switchStats('skywars')" id="button-skywars" data-t="games.skywars">SkyWars</p>
          <div class="dropdown">
            <p class="header-down dropdown-button">
              <img class="dropdown-arrow" src="/img/svg/arrow.svg" alt="More games">
            </p>
              <div class="dropdown-content dropdown-games unloaded">
                <span class="mobile-exclusive" id="game-switch-mobile">
                </span>
                <hr class="game-switch-hr">
                <span id="game-switch">
                </span>
                <hr class="dropdown-hr">
                <span id="other-switch">
                </span>
              </div>

          </div>
        </div>
      </div>
    </header>

    <div class="games" id="games">
      <div class="flex-container unloaded" id="flex-container-network"> <!-- network stats -->
        <canvas id="skin-container" class="avatar unloaded" style="background-color: transparent"></canvas>
        <section class="player-card" id="player-card">
          <div class="player-info">
            <div class="details">
              <div class="flex-two-item unless-tiny">
                <div class="flex-vertical">
                  <span class="player-name">
                    <span class="rank" id="card-rank"><span id="card-ranktext"><span class="mc">Unknown</span></span></span> <span class="m7" id="card-name"><span class="mc">Unknown</span></span> <span id="card-guild"><span class="mc">Unknown</span></span>

                    <span class="tooltip">
                      <a id="badge-link" target="_blank">
                        <img class="special icon smallicon badge-large" id="badge" alt="User badge">
                      </a>
                      <span class="tooltiptext" id="badge-text"></span>
                    </span>
                  </span>
                  <span id="card-uuid"></span>
                </div>

                <span id="online-status-wrapper">
                  <div id="online-status">
                    <span class="mc">Unknown</span>
                  </div>
                  <span class="tooltiptext">
                    <span id="online-status-location"></span>
                  </span>
                </span>
              </div>

              <div class="extended-card" id="extended-card">
                <div id="real-stats">
                <p id="level-container-container"><span id="level-container"><span data-t="statistics.level">Level</span> <span id="level" class="statistic"><span class="mc">Unknown</span></span></span> <span class="tooltip"><span class="m8">(<span id="multiplier">1</span>&times;)</span><span class="tooltiptext" data-t="player.coin_multiplier">Coin Multiplier</span></span></p>
                <div class="progress-bar">
                  <span class="progress-number" id="xp-progress-number"><span class="mc">Unknown</span></span>
                  <div class="progress" style="width: 0%;" id="xp-progress-bar"></div>
                </div>
                <div class="stats">
                  <div class="login-info flex-two-item">
                    <p class="flex-item margin10" id="first-login-container"><span data-t="statistics.first_login">First Login</span> <span class="tooltip"><span class="statistic" id="first-login"><span class="mc">Unknown</span></span><span class="tooltiptext" id="first-login-ago-full"></span></span> <span id="first-login-ago"><span class="mc">Unknown</span></span>
                    <span class="tooltip"><img id="birthday" class="icon tinyicon" src="/img/special/cake.png"><span class="tooltiptext" id="birthday-text"></span></span></p>

                    <p id="last-login-container" class="flex-item login-duo"><span data-t="statistics.last_login">Last Login</span> <span class="tooltip"><span class="statistic" id="last-login"><span class="mc">Unknown</span></span><span class="tooltiptext" id="last-login-ago-full"></span></span> <span id="last-login-ago"><span class="mc">Unknown</span></span></p>
                  </div>
                  <div class="flex-two-item general-guild" style="align-items: start;">
                    <div class="general-stats flex-item">
                      <p class="stat-title super-subtitle" data-t="games.modes.network.general">General</p>
                      <p><a data-t="statistics.achievement_points" id="achievement-points-text" target="_blank" style="color: var(--pale-grey)">Achievement Points</a> <span class="statistic" id="achievement-points"><span class="mc">Unknown</span></span></p>
                      <p><span data-t="statistics.karma">Karma</span> <span class="statistic" id="karma"><span class="mc">Unknown</span></span></p>
                      <p><a data-t="statistics.quests_completed" id="quests-completed-text" target="_blank" style="color: var(--pale-grey)">Quests Completed</a> <span class="statistic" id="quests-completed"><span class="mc">Unknown</span></span></p>
                      <p><span data-t="statistics.ranks_gifted">Ranks Gifted</span> <span class="statistic" id="ranks-gifted"><span class="mc">Unknown</span></span></p>
                    </div>
                    <div class="general-stats flex-item" id="guild-stats">
                      <a target="_blank" class="stat-title super-subtitle" data-t="games.modes.network.guild" id="guild-stats-header">Guild</a>
                      <p><span data-t="statistics.name">Name</span> <span class="statistic" id="guild-name"><span class="mc">Unknown</span></span> <span id="guild-tag"><span class="mc">Unknown</span></span></span></p>
                      <p><span data-t="statistics.level">Level</span> <span class="statistic" id="guild-level"><span class="mc">Unknown</span></span></p>
                      <p><span data-t="statistics.members">Members</span> <span class="statistic" id="guild-members"><span class="mc">Unknown</span></span></p>
                      <p><span data-t="statistics.joined">Joined</span> <span class="tooltip"><span class="statistic" id="guild-joined"><span class="mc">Unknown</span></span><span class="tooltiptext" id="guild-joined-ago-full"></span></span>

                      <span id="guild-joined-ago"><span class="mc">Unknown</span></span></p>
                    </div>
                  </div>
                </div>
              </div>

                <div id="network-error" style="display: none">
                  <p class="title-text" id="error-title" data-t="player.errors.no_stats">No Hypixel Stats</p>
                  <p class="subtitle-text" id="error-subtitle" data-t="player.errors.no_stats_desc">This player has no Hypixel stats.</p>
                </div>
              </div>
              <div class="flex-two-item socials-buttons" id="general-bottom-bar">
                <div class="buttons">
                  <span class="general-button" onclick="showCardWizard('NETWORK')" data-t="player.generate_card">Generate Card</span>

                  <div class="dropdown">
                    <span class="general-button dropdown-button" data-t="player.external_websites">External Websites</span>
                    <div class="dropdown-content unloaded" id="abvc">
                      <a target="_blank" aria-label="View SkyCrypt stats" href="https://sky.shiiyu.moe/stats/<%= playerData.uuid %>"><span class="logo-container"><img src="/img/logo/skycrypt.svg" alt="" class="social-media-dropdown"></span><span>SkyCrypt <img src="/img/svg/external.svg" alt="" class="verytinyicon"></span></span></a>
                      <a target="_blank" aria-label="View 25Karma stats" href="https://plancke.io/hypixel/player/stats/<%= playerData.uuid %>"><span class="logo-container"><img src="/img/svg/plancke.svg" alt="" class="social-media-dropdown"></span><span>Plancke <img src="/img/svg/external.svg" alt="" class="verytinyicon"></span></span></a>
                      <a target="_blank" aria-label="View 25Karma stats" href="https://25karma.xyz/player/<%= playerData.uuid %>"><span class="logo-container"><img src="/img/svg/25karma.svg" alt="" class="social-media-dropdown"></span><span>25Karma <img src="/img/svg/external.svg" alt="" class="verytinyicon"></span></span></a>
                      <a target="_blank" aria-label="View Shmeado stats" href="https://shmeado.club/player/stats/<%= playerData.name %>"><span class="logo-container"><img src="/img/svg/shmeado.svg" alt="" class="social-media-dropdown"></span><span>Shmeado <img src="/img/svg/external.svg" alt="" class="verytinyicon"></span></span></a>
                      <a target="_blank" aria-label="View Memum stats" href="https://memum.io/player/<%= playerData.name %>"><span class="logo-container"><img src="/img/svg/memum.svg" alt="" class="social-media-dropdown"></span><span>Memum <img src="/img/svg/external.svg" alt="" class="verytinyicon"></span></span></a>
                      <a target="_blank" aria-label="View Sk1er stats" href="https://sk1er.club/stats/<%= playerData.name %>"><span class="logo-container"><img src="/img/svg/sk1er.svg" alt="" class="social-media-dropdown"></span><span>Sk1er <img src="/img/svg/external.svg" alt="" class="verytinyicon"></span></span></a>
                      <a target="_blank" aria-label="View NameMC stats" href="https://namemc.com/profile/<%= playerData.uuid %>"><span class="logo-container"><img src="/img/svg/namemc.svg" alt="" class="social-media-dropdown"></span><span>NameMC <img src="/img/svg/external.svg" alt="" class="verytinyicon"></span></span></a>
                    </div>

                  </div>

                  <div class="dropdown" id="social-media-dropdown-container">
                  <span class="general-button dropdown-button unloaded" onclick="" id="social-media-button" data-t="player.socials">Socials</span>         <div class="dropdown-content unloaded" id="social-media-alternative">
                    <a target="_blank" id="social-hypixel-alternative" aria-label="View Hypixel Forums profile"><span class="logo-container"><img src="/img/logo/hypixel.svg" alt="" class="social-media-dropdown"></span> Hypixel</a>
                    <a target="_blank" id="social-youtube-alternative" aria-label="View linked YouTube"><span class="logo-container"><img src="/img/logo/youtube.svg" alt="" class="social-media-dropdown"></span> YouTube</a>
                    <a target="_blank" id="social-twitter-alternative" aria-label="View linked Twitter"><span class="logo-container"><img src="/img/logo/twitter.svg" alt="" class="social-media-dropdown"></span> Twitter</a>
                    <a target="_blank" id="social-tiktok-alternative" aria-label="View linked TikTok"><span class="logo-container"><img src="/img/logo/tiktok.svg" alt="" class="social-media-dropdown"></span> TikTok</a>
                    <a target="_blank" id="social-twitch-alternative" aria-label="View linked Twitch"><span class="logo-container"><img src="/img/logo/twitch.svg" alt="" class="social-media-dropdown"></span> Twitch</a>
                    <a target="_blank" id="social-discord-alternative" onclick="copyText('social-discord-username', true)" aria-label="View linked Discord"><span class="logo-container"><img src="/img/logo/discord.svg" alt="" class="social-media-dropdown"></span> <span id="social-discord-username-alternative">Discord</span></a>
                </div></div>
                </div>

                <div class="socials flex-two-item flex-separated" id="social-media">
                  <a target="_blank" id="sociallink-hypixel" aria-label="View Hypixel Forums profile"><img src="/img/logo/hypixel.svg" class="social-media-logo" id="social-hypixel" alt="Hypixel logo"></a>
                  <a target="_blank" id="sociallink-youtube" aria-label="View linked YouTube"><img src="/img/logo/youtube.svg" class="social-media-logo" id="social-youtube" alt="YouTube logo"></a>
                  <a target="_blank" id="sociallink-twitter" aria-label="View linked Twitter"><img src="/img/logo/twitter.svg" class="social-media-logo" id="social-twitter" alt="Twitter logo"></a>
                  <a target="_blank" id="sociallink-tiktok" aria-label="View linked TikTok"><img src="/img/logo/tiktok.svg" class="social-media-logo" id="social-tiktok" alt="TikTok logo"></a>
                  <a target="_blank" id="sociallink-twitch" aria-label="View linked Twitch"><img src="/img/logo/twitch.svg" class="social-media-logo" id="social-twitch" alt="Twitch logo"></a>

                  <div class="flex-two-item" onclick="copyText('social-discord-username', true)">
                    <a target="_blank" id="sociallink-discord" aria-label="View linked Discord" style="display: flex; align-items: center; width: 32px;">
                      <img src="/img/logo/discord.svg" class="social-media-logo" id="social-discord" alt="Discord logo">
                    </a>
                    <p class="w500 mleft" id="social-discord-username"></p>
                  </div>
                </div>
              </div>
            </div>
          </div>

        </section>
      </div>

</div>

  <div class="quick-mode hidden pushdown" id="quick-mode">
    <section class="player-card" style="align-content: center;">
      <p class="title-text margin-top-bottom"><span data-t="player.quick_mode.title">Quick Mode</span> <kbd data-t="player.quick_mode.key">SHIFT</kbd></p>
      <p class="subtitle-text" id="quick-mode-text">Click an icon to instantly go to that game's page for <span id="quick-mode-username">%%player%%</span>.</p>
      <p class="flex-quick-mode margin-top-bottom" id="quick-mode-games">

      </p>
    </section>
  </div>
    <footer>
      <%- include('partials/footer') %>
    </footer>
  </div>

<script>
  var playerData;
  let playerName = "<%= name %>";
  var currentGamemode = "<%= game %>";

  let minigameFragments = {};
  let activeScope;

  let validGames = ["network", "bedwars", "duels", "skywars", "arcade", "buildbattle", "murdermystery", "tntgames", "pit", "classic", "megawalls", "copsandcrims", "uhc", "blitz", "woolgames", "warlords", "smashheroes", "fishing"];

  let minecraftColorCodes = {
    BLACK: "ยง0",
    DARK_BLUE: "ยง1",
    DARK_GREEN: "ยง2",
    DARK_AQUA: "ยง3",
    DARK_RED: "ยง4",
    DARK_PURPLE: "ยง5",
    GOLD: "ยง6",
    GRAY: "ยง7",
    DARK_GRAY: "ยง8",
    BLUE: "ยง9",
    GREEN: "ยงa",
    AQUA: "ยงb",
    RED: "ยงc",
    LIGHT_PURPLE: "ยงd",
    YELLOW: "ยงe",
    WHITE: "ยงf",
  };

  playerData = JSON.parse(decodeURIComponent("<%- encodeURIComponent(JSON.stringify(playerData)) %>"));

  let playerAchievements = playerData["achievements"] || {};

  const imageUrls = [
    `/img/games/network/lobby.webp`,
    `/img/games/arcade/lobby.webp`,
    `/img/games/bedwars/lobby.webp`,
    `/img/games/blitz/lobby.webp`,
    `/img/games/buildbattle/lobby.webp`,
    `/img/games/classic/lobby.webp`,
    `/img/games/copsandcrims/lobby.webp`,
    `/img/games/duels/lobby.webp`,
    `/img/games/megawalls/lobby.webp`,
    `/img/games/murdermystery/lobby.webp`,
    `/img/games/pit/lobby.webp`,
    `/img/games/smashheroes/lobby.webp`,
    `/img/games/skywars/lobby.webp`,
    `/img/games/tntgames/lobby.webp`,
    `/img/games/uhc/lobby.webp`,
    `/img/games/warlords/lobby.webp`,
    `/img/games/woolgames/lobby.webp`,
    `/img/games/fishing/lobby.webp`
  ];

  imageUrls.forEach(url => {
    const img = new Image();
    img.src = url;
  });

  if (!validGames.includes(currentGamemode)) {
    let defaultGame;
    if(settings) {
      defaultGame = settings["default-game"];
      if(!validGames.includes(defaultGame)) {
        defaultGame = "network";
      }
    } else {
      defaultGame = "network";
      console.error("Settings not found; this should not happen");
    }

    console.log(`Invalid game mode; defaulting to the default game (${defaultGame})`);
    currentGamemode = defaultGame;
    window.history.replaceState({}, null, `/player/${playerName}${currentGamemode == "network" ? "" : `/${currentGamemode}`}`);
  }

  if (playerData["profile"] == undefined) {
    currentGamemode = "network";
  }

  window.addEventListener("resize", checkMobileMode);

  document.addEventListener("DOMContentLoaded", function() { // Runs on page load
    beginGeneration("DOMContentLoaded");
    try {
      var skinViewModel = "classic";
      if (playerData["slim"]) {
        skinViewModel = "slim";
      }

      var skinUrl = playerData["skin"];
      if (skinUrl && skinUrl.startsWith("http:")) {
        skinUrl = skinUrl.replace("http:", "https:");
      }

      let capeBase64 = playerData["cape"];

      if (capeBase64 && capeBase64 != "") {
        capeBase64 = "data:image/png;base64," + playerData["cape"];
      } else {
        capeBase64 = null;
      }

      skinViewer = new skinview3d.SkinViewer({ // Imports SkinView3D for the 3D skin.
        canvas: document.getElementById("skin-container"),
        width: 300,
        height: 400,
        model: skinViewModel,
        skin: skinUrl,
        cape: capeBase64
      });

     skinViewer.camera.position.set(-30, 9, 50); // Sets player orientation
     skinViewer.animation = new skinview3d.IdleAnimation();
     skinViewer.playerObject.cape.rotation.x = 1;

     skinViewer.controls.enableZoom = false;

     document.addEventListener('keydown', function(event) {
         if (event.keyCode === 16 && !isInputField(document.activeElement)) { // If LSHIFT pressed, adjust skin to sneak based on constants from Mine-imator
             skinViewer.animation.paused = true; // Cape can't move in the x direction while idle animation is on
             let skinViewerObject = skinViewer.playerObject;
             let skinViewerSkin = skinViewerObject.skin;

             skinViewerSkin.head.position.y = -2.5;

             skinViewerSkin.body.rotation.x = 0.4887;
             skinViewerSkin.body.position.y = -7;
             skinViewerSkin.body.position.z = -2;

             skinViewerSkin.leftArm.rotation.x = 0.3491;
             skinViewerSkin.leftArm.position.y = -3.5;

             skinViewerSkin.rightArm.rotation.x = 0.3491;
             skinViewerSkin.rightArm.position.y = -3.5;

             skinViewerSkin.leftLeg.position.x = 2;
             skinViewerSkin.leftLeg.position.y = -11;
             skinViewerSkin.leftLeg.position.z = -3.5;

             skinViewerSkin.rightLeg.position.x = -2;
             skinViewerSkin.rightLeg.position.y = -11;
             skinViewerSkin.rightLeg.position.z = -3.5;

             skinViewerObject.cape.rotation.x = 0.4365;
             skinViewerObject.cape.position.y = 7;
             skinViewerObject.cape.position.z = -2;
         }
     });


     document.addEventListener('keyup', function(event) {
         if (event.keyCode === 16) { // Removes sneak; sets values to defaults
             skinViewer.animation.paused = false;
             let skinViewerSkin = skinViewer.playerObject.skin;
             let skinViewerObject = skinViewer.playerObject;

             skinViewerSkin.head.position.y = 0;

             skinViewerSkin.body.rotation.x = 0;
             skinViewerSkin.body.position.y = -6;
             skinViewerSkin.body.position.z = 0;

             skinViewerSkin.leftArm.position.y = -2;
             skinViewerSkin.leftArm.rotation.x = 0;

             skinViewerSkin.rightArm.rotation.x = 0;
             skinViewerSkin.rightArm.position.y = -2;

             skinViewerSkin.leftLeg.position.x = 2;
             skinViewerSkin.leftLeg.position.y = -12;
             skinViewerSkin.leftLeg.position.z = 0;

             skinViewerSkin.rightLeg.position.x = -2;
             skinViewerSkin.rightLeg.position.y = -12;
             skinViewerSkin.rightLeg.position.z = 0;

             skinViewerObject.cape.rotation.x = 1.5714;
             skinViewerObject.cape.position.y = 8;
             skinViewerObject.cape.position.z = -2;
         }
     });

     document.getElementById("skin-container").classList.remove("unloaded");
 } catch (error) {
     console.error("Error loading SkinView3D!: " + error);
 }
  });


function isInputField(element) { // Determines if the user's actively in an input field (so Quick Mode and easter eggs don't get messed up)
  return (
    element.tagName === 'INPUT' ||
    element.tagName === 'TEXTAREA' ||
    element.isContentEditable
  );
}

function generateChip(stats_object, where) { // Converts an array of stats into an HTML chip for stats viewing
  var fullCard = "";
  var selectionItems = "";

  fullCard += `<div class="chip-small">`; // Adds parent div

  for (c = 0; c < stats_object[5].length; c++) {
    dropdownItem = stats_object[5][c];
    /* A typical dropdownItem looks like this:
     * ["Overall", "overall", "/img/overall.png"]
     * In this case, the first element is the display name, the second is the name in the API, and the third is the image URL.
     * However, if the first element is "nadeshiko-internal", the dropdown item is a special item that doesn't have a game mode, which is used to add items like horizontal rules.
     */

    if (dropdownItem[0] == "nadeshiko-internal") {
      if (dropdownItem[1] == "hr") {
        selectionItems += `<hr class="dropdown-hr">`;
      }
    } else {
      selectionItems += `<div class="dropdown-item${c == 0 ? " selected" : ""}" data-item="${dropdownItem[1]}">${dropdownItem[2] == undefined || dropdownItem[2] == "" ? "" : `<img src="${dropdownItem[2]}" alt="" class="chip-dropdown-icon icon">`}<span class="dropdown-item-text">${dropdownItem[0]}</span></div>`;
    }
  }

  if(stats_object[5].length > 0) {
    selectionItems = `<div class="dropdown"><p class="dropdown-button chip-dropdown-button"><span>${stats_object[5][0][0]}</span></p><div class="dropdown-content unloaded dropdown-chip" data-modify="${stats_object[0]}" data-game="${stats_object[7]}">${selectionItems}</div></div>`;
  } else {
    selectionItems = "";
  }

  chipImage = ((stats_object[6] != undefined && stats_object[6] != "") ? `<img src="${stats_object[6]}" class="chip-icon icon" alt="">` : "")

  fullCard += `<div class="chip-small-top"><div class="chip-small-background-filter" style="background-image: url(${stats_object[3]})"></div> <p class="chip-small-title">${stats_object[1]}</p><span class="flex-two-item">${selectionItems + chipImage}</span></div><p class="chip-small-subtitle">${stats_object[2]}</p><div class="chip-small-container" id="${stats_object[0]}">`; // Adds title, background image (if applicable), and subtitle

  fullCard += generateChipStats(stats_object[4]);

  fullCard += `</div></div>`;

  activeScope.getElementById(where).insertAdjacentHTML("beforeend", fullCard);
}

function generateChipStats(chipStatsSub) { // Generates the stats inside of the chip
  let chipStats = "";

  for(a = 0; a < chipStatsSub.length; a++) { // For each row in the chip
    chipStats += `<div class="chip-small-statistic-row ${chipStatsSub[a][0] ? `more-margin` : ``}">`;
    for(b = 1; b < chipStatsSub[a].length; b++) {
      chipItem = chipStatsSub[a][b];
      if(chipItem != undefined) {
        chipStats += `<p>${chipItem[0]} <span class="statistic">${chipItem[1]}</span></p>`;
      }
    }
    // add additional margin later
    chipStats += `</div>`;

  }
  return chipStats;
}

function redirectToHttps() { // If the user's on the HTTP version of nadeshiko, switch to HTTPS
  windowLocation = window.location;

  if(windowLocation.protocol == "http:" && windowLocation.host != "localhost:8080") { // If the user's using HTTP (and it's not localhost)
      window.location = "https://nadeshiko.io" + windowLocation.pathname + windowLocation.search;
  }
}

var skinViewer;

const generateFunctions = {
  network: {
    called: true
  },
  bedwars: {
    function: generateBedWars,
    called: false
  },
  duels: {
    function: generateDuels,
    called: false
  },
  skywars: {
    function: generateSkyWars,
    called: false
  },
  buildbattle: {
    function: generateBuildBattle,
    called: false
  },
  murdermystery: {
    function: generateMurderMystery,
    called: false
  },
  tntgames: {
    function: generateTNTGames,
    called: false
  },
  arcade: {
    function: generateArcade,
    called: false
  },
  pit: {
    function: generatePit,
    called: false
  },
  classic: {
    function: generateClassic,
    called: false
  },
  copsandcrims: {
    function: generateCopsAndCrims,
    called: false
  },
  blitz: {
    function: generateBlitz,
    called: false
  },
  megawalls: {
    function: generateMegaWalls,
    called: false
  },
  warlords: {
    function: generateWarlords,
    called: false
  },
  uhc: {
    function: generateUHC,
    called: false
  },
  smashheroes: {
    function: generateSmash,
    called: false
  },
  woolgames: {
    function: generateWoolGames,
    called: false
  },
  fishing: {
    function: generateFishing,
    called: false
  }
};

 function insertLoadedData() {
      redirectToHttps();

      generateNetwork();
      checkMobileMode(event, true);
  }

  /**
   * Changes the current gamemode (background, highlighted button, etc.) to the specified gamemode
   * @param {string} gamemode The gamemode to switch to
   */
  function switchStats(gamemode) {
    // if not in validGames
    if (!validGames.includes(gamemode)) {
      console.error(`Invalid game mode "${gamemode}"!`);
      return;
    }

    console.log(`Switching to ${gamemode} stats`);

    if (!generateFunctions[gamemode]["called"]) {
      generateFunctions[gamemode]["called"] = true;
      generateFunctions[gamemode]["function"]();
    }

      gamesWithEasilyClickableButtons = ["network", "bedwars", "skywars", "duels"];
    //if(gamemode != currentGamemode) {
      if(gamesWithEasilyClickableButtons.indexOf(currentGamemode) != -1) {
        document.getElementById("button-" + currentGamemode).classList.remove("highlighted");
      }
      document.getElementById("flex-container-" + currentGamemode).classList.add("unloaded");
      currentGamemode = gamemode;

      if(gamesWithEasilyClickableButtons.indexOf(currentGamemode) != -1) {
        document.getElementById("button-" + currentGamemode).classList.add("highlighted");
      }
      document.documentElement.style.setProperty('--accent', getComputedStyle(document.documentElement).getPropertyValue('--accent-' + currentGamemode));
      document.getElementById("flex-container-" + currentGamemode).style.display = "flex";
      document.body.scrollTop; // Forces a DOM reflow to allow the transition to work
      document.getElementById("flex-container-" + currentGamemode).classList.remove("unloaded");


        setBackground(currentGamemode);

      // Change the URL to reflect the current gamemode
      if (history.replaceState && playerData != undefined) {
        window.history.replaceState({}, null, `/player/${playerData["name"]}/${currentGamemode}`);
      }
    //}
  }

  function setBackground(gamemode) { // Allows a fade between two backgrounds. Is this totally inefficient? Probably
     const bg1 = document.getElementById("background1");
     const bg2 = document.getElementById("background2");
     if (bg1.style.opacity == '1' || bg1.style.opacity === '') {
       bg2.style.backgroundImage = `url('/img/games/${gamemode}/lobby.${imageFileType}')`;
       bg1.style.opacity = '0';
       bg2.style.opacity = '1';
     } else {
       bg1.style.backgroundImage = `url('/img/games/${gamemode}/lobby.${imageFileType}')`;
       bg2.style.opacity = '0';
       bg1.style.opacity = '1';
     }
   }

  function copyText(text, isDocumentId) {
    if(isDocumentId) {
      navigator.clipboard.writeText(document.getElementById(text).innerText);
    } else {
      navigator.clipboard.writeText(text);
    }
  }

  function onShiftDown() {
    if(settings["quick-mode"] == true) {
      document.getElementById("games").classList.add("pushup");
      document.getElementById("games").classList.add("o30");
      document.getElementById("quick-mode").classList.remove("pushdown");
      document.getElementById("quick-mode").classList.remove("hidden");
    }
  }

  function onShiftUp() {
      document.getElementById("games").classList.remove("pushup");
      document.getElementById("games").classList.remove("o30");
      document.getElementById("quick-mode").classList.add("pushdown");
      document.getElementById("quick-mode").classList.add("hidden");
  }

  let isShiftPressed = false;

  function handleKeyDown(event) {
      if (event.key === "Shift" && !isShiftPressed && !isInputField(document.activeElement)) {
          isShiftPressed = true;
          onShiftDown();
      }
  }

  function handleKeyUp(event) {
      if (event.key === "Shift" && isShiftPressed) {
          isShiftPressed = false;
          onShiftUp();
      }
  }

  function handleVisibilityChange() {
      if (document.visibilityState === 'visible' && isShiftPressed) {
          isShiftPressed = false;
          onShiftUp();
      }
  }

  document.addEventListener('keydown', handleKeyDown);
  document.addEventListener('keyup', handleKeyUp);
  document.addEventListener('visibilitychange', handleVisibilityChange);

  function checkMobileMode(event, override = false) {
    if (window.innerWidth < 800) {
      if (!mobileMode || override) {
        console.log("Mobile mode activated!" + override);
        mobileMode = true;
        const duoParents = document.querySelectorAll('.chip-container-duo-parent');

        duoParents.forEach(duoParent => {
          const parent1 = duoParent.children[0];
          const parent2 = duoParent.children[1];
          const children1 = Array.from(parent1.children);
          const children2 = Array.from(parent2.children);

          let maxLength = Math.max(children1.length, children2.length);
          for (let i = 0; i < maxLength; i++) {
            if (children1[i]) {
              parent1.appendChild(children1[i]);
            }
            if (children2[i]) {
              parent1.appendChild(children2[i]);
            }
          }

          parent2.style.display = 'none';
        });
      }
    } else {
      if (mobileMode) {
        mobileMode = false;
        const duoParents = document.querySelectorAll('.chip-container-duo-parent');

        duoParents.forEach(duoParent => {
          const parent1 = duoParent.children[0];
          const parent2 = duoParent.children[1];
          const children1 = Array.from(parent1.children);

          parent1.innerHTML = ''
          parent2.innerHTML = '';

          children1.forEach((child, index) => {
            if (index % 2 === 0) {
              parent1.appendChild(child);
            } else {
              parent2.appendChild(child);
            }
          });

          parent2.style.display = '';
        });
      }
    }
  }
</script>
</body>
</html>