<!DOCTYPE html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="shortcut icon" type="image/x-icon" href="/img/logo.png">
  <link rel="stylesheet" href="/css/stylesheet.css">
  <script src="/external/skinview3d.bundle.js" type="module"></script>
  <script src="/external/minecrafttext.js"></script>
  <script src="https://unpkg.com/card3d@2.6.5/dist/card3d.js"></script> <!-- unused u can remove it -->
  <meta name="theme-color" content="#f6adc6">
  <meta property="og:site_name" content="nadeshiko.io">
  <title><%- (playerData["profile"]["tagged_name"]).replaceAll(/¬ß[A-Fa-f0-9]/g, "") %> | nadeshiko.io</title>

  <% if (playerData && playerData.profile && playerData.profile.network_level) { %>
    <meta name="description" content="<%= playerData.status.online ? 'üü¢ Online!' : 'üî¥ Offline' %>

    üåê Network Level: <%-(playerData.profile.network_level).toFixed(2)%>
    üìú Quests Completed: <%-(playerData.profile.quests_completed).toLocaleString()%>
    ‚òÆÔ∏è Karma: <%-(playerData.profile.karma).toLocaleString()%>
    üèÜ Achievement Points: <%-(playerData.profile.achievement_points).toLocaleString()%>
    üí∏ Ranks Gifted: <%-(playerData.profile.ranks_gifted).toLocaleString()%>">
  <% } %>
</head>

<body>
  <div class="background-filter">
    <header>
      <div class="header"> <!-- site-wide header -->
        <div class="header-left">
          <img class="logo" src="/img/logo.png" alt="nadeshiko logo">
          <p class="wordmark">nadeshiko</p>
          <a href="#home" class="header-button"><img src="/img/home.svg" class="header-icon">Home</a>
          <a href="#about" class="header-button"><img src="/img/about.svg" class="header-icon">About</a>
          <a href="#cards" class="header-button"><img src="/img/cards.svg" class="header-icon">Cards</a>
        </div>
        <div class="header-right">
          <input type="search" class="searchbar" id="searchbar" placeholder="&#x1F50E;&#xFE0E;  Search for a player...">
        </div>
      </div>
      <div class="header2"> <!-- secondary header for game bar -->
        <div class="header-left">
          <p class="header-name unloaded" id="header-name"></p>
        </div>
        <div class="header-right">
          <p class="header-game highlighted">Network</p>
          <p class="header-game">Bed Wars</p>
          <p class="header-game">Duels</p>
          <p class="header-game">SkyWars</p>
          <p class="header-down">‚è∑</p>
        </div>
      </div>
    </header>
    <div class="flex-container unloaded" id="flex-container-0"> <!-- general stats -->
      <canvas id="skin_container" class="avatar"></canvas>
      <section class="player-card">
        <div class="player-info">
          <div class="details">
            <div class="flex-two-item">
              <span class="player-name">
                <span class="rank" id="card-rank"><span id="card-ranktext"><span class="mc">Unknown</span></span></span> <span class="m6" id="card-name"><span class="mc">Unknown</span></span> <span id="card-guild"><span class="mc">Unknown</span></span><img class="special icon smallicon" id="special">
              </span>
              <span id="online-status"><span class="mc">Unknown</span></span>
            </div>

            <div class="extended-card">
              <p id="level-container-container"><span id="level-container">Level <span id="level" class="statistic"><span class="mc">Unknown</span></span></span> <span class="m8">(<span id="multiplier">1</span>&times;)</span></p>
              <div class="progress-bar">
                <span class="progress-number" id="xp-progress-number"><span class="mc">Unknown</span></span>
                <div class="progress" style="width: 66%;" id="xp-progress-bar"></div>
              </div>
              <div class="stats">
                <div class="login-info flex-two-item">
                  <p class="half-and-half login-duo">First Login <span class="statistic" id="first-login"><span class="mc">Unknown</span></span> <span id="first-login-ago"><span class="mc">Unknown</span></span>
                  <span class="tooltip"><img id="birthday" class="icon tinyicon" src="/icon/cake.png"><span class="tooltiptext" id="birthday-text"></span></span></p>

                  <p id="last-login-container" class="half-and-half login-duo">Last Login <span class="statistic" id="last-login"><span class="mc">Unknown</span></span> <span id="last-login-ago"><span class="mc">Unknown</span></span></p>
                </div>
                <div class="flex-two-item general-guild">
                  <div class="general-stats half-and-half">
                    <p class="stat-title">General</p>
                    <p>Achievement Points <span class="statistic" id="achievement-points"><span class="mc">Unknown</span></span></p>
                    <p>Karma <span class="statistic" id="karma"><span class="mc">Unknown</span></span></p>
                    <p>Quests Completed <span class="statistic" id="quests-completed"><span class="mc">Unknown</span></span></p>
                    <p>Ranks Gifted <span class="statistic" id="ranks-gifted"><span class="mc">Unknown</span></span></p>
                  </div>
                  <div class="general-stats half-and-half" id="guild-stats">
                    <p class="stat-title">Guild</p>
                    <p>Name <span class="statistic" id="guild-name"><span class="mc">Unknown</span></span> <span id="guild-tag"><span class="mc">Unknown</span></span></span></p>
                    <p>Level <span class="statistic" id="guild-level"><span class="mc">Unknown</span></span></p>
                    <p>Members <span class="statistic" id="guild-members"><span class="mc">Unknown</span></span></p>
                    <p>Joined <span class="statistic" id="guild-joined"><span class="mc">Unknown</span></span> <span id="guild-joined-ago"><span class="mc">Unknown</span></span></p>
                  </div>
                </div>
              </div>
            </div>
            <div class="flex-two-item socials-buttons">
              <div class="buttons"><span class="general-button mright">Generate Card</span><span class="general-button">SkyBlock Stats</span></div>
              <div class="socials flex-two-item flex-separated"><a target="_blank" id="sociallink-hypixel"><img src="/img/hypixel.svg" class="social-media-logo mright" id="social-hypixel"></a><a target="_blank" id="sociallink-youtube"><img src="/img/youtube.svg" class="social-media-logo mleft mright" id="social-youtube"></a><a target="_blank" id="sociallink-twitter"><img src="/img/twitter.svg" class="social-media-logo mright mleft" id="social-twitter"></a><a target="_blank" id="sociallink-tiktok"><img src="/img/tiktok.svg" class="social-media-logo mleft mright" id="social-tiktok"></a><a target="_blank" id="sociallink-twitch"><img src="/img/twitch.svg" class="social-media-logo mright  mleft" id="social-twitch"></a><a target="_blank" id="sociallink-discord"><img src="/img/discord.svg" class="mleft social-media-logo" id="social-discord"></a>
                <p class="w500 mleft" id="social-discord-username"></p></span>
              </div>
            </div>
          </div>
        </div>

      </section>
    </div>

    <footer>
      Made with ‚ô•&#xFE0E; by <a href="https://github.com/niqumu" target="_blank">kittycatchloe</a> and <a href="https://brookie.dev" target="_blank">BrookeAFK</a>.
    </footer>
  </div>
  

 
<script>
  var playerData;

  const COLORS = {
    BLACK: "0",
    DARK_BLUE: "1",
    DARK_GREEN: "2",
    DARK_AQUA: "3",
    DARK_RED: "4",
    DARK_PURPLE: "5",
    GOLD: "6",
    GRAY: "7",
    DARK_GRAY: "8",
    BLUE: "9",
    GREEN: "a",
    AQUA: "b",
    RED: "c",
    LIGHT_PURPLE: "d",
    YELLOW: "e",
    WHITE: "f",
  };

  function und(text) { // Returns 0 in the case of a missing value
    if(text == null || text == undefined || text == NaN) return 0;
    else return text;
  }


  // Runs once the page is fully loaded.
  document.addEventListener("DOMContentLoaded", function() {

    playerName = "<%= name %>";

    playerData = JSON.parse(decodeURIComponent("<%- encodeURIComponent(JSON.stringify(playerData)) %>"));
    console.log(playerData);
    insertLoadedData();
  });

  function relativeTime(timestamp, currentTime = Date.now()) { // Returns a timestamp showing how long ago a date was in the past.
    let dateNew = new Date(currentTime);
    let dateOld = new Date(timestamp);

    let years = dateNew.getFullYear() - dateOld.getFullYear();
    let months = dateNew.getMonth() - dateOld.getMonth();
    let days = dateNew.getDate() - dateOld.getDate();
    let hours = dateNew.getHours() - dateOld.getHours();
    let minutes = dateNew.getMinutes() - dateOld.getMinutes();
    let seconds = dateNew.getSeconds() - dateOld.getSeconds();

    if (seconds < 0) {
      minutes--;
      seconds += 60;
    }

    if (minutes < 0) {
      hours--;
      minutes += 60;
    }

    if (hours < 0) {
      days--;
      hours += 24;
    }

    if (days < 0) {
      months--;
      days += new Date(dateOld.getFullYear(), dateOld.getMonth() + 1, 0).getDate(); // Ensures that a month has the correct number of days.
    }

    if (months < 0) {
      years--;
      months += 12;
    }

    if (years > 0) return `${years}y ago`;
    if (months > 0) return `${months}m ago`;
    if (days > 0) return `${days}d ago`;
    if (hours > 0) return `${hours}h ago`;
    if (minutes > 0) return `${minutes}min ago`;
    if (seconds > 0) return `${seconds}s ago`;
    return "now!";
  }

  function cuteRank(text, style = 0) {
    if(style == 0) return generateMinecraftText(text);
    else {
      var playerRankColorRegexMatch = (text.match(/¬ß([0-9a-f])/));
      var playerRankColor = (playerRankColorRegexMatch == null) ? "7" : (playerRankColorRegexMatch)[1];

      if(playerRankColorRegexMatch != null) { var playerRankRest = (text.substring(2)).replace(/\[|\]/g, "") }
      else { var playerRankRest = text } // Emergency fallback if no section code is detected

      return([playerRankColor, generateMinecraftText(playerRankRest)]);
    }
  }


function isInputField(element) {
  return (
    element.tagName === 'INPUT' || 
    element.tagName === 'TEXTAREA' || 
    element.isContentEditable
  );
}


 function insertLoadedData() {

      let skinViewer = new skinview3d.SkinViewer({ // Imports SkinView3D for the 3D skin.
          canvas: document.getElementById("skin_container"),
          width: 300,
          height: 400,
          model: (playerData["slim"] ? "slim" : "classic"),
          skin: playerData["skin"],
          cape: playerData["cape"]
      });

      skinViewer.camera.position.set(-30, 9, 50); // Sets player orientation
      skinViewer.animation = new skinview3d.IdleAnimation();
      skinViewer.controls.enableZoom = false;


      document.addEventListener('keydown', function(event) {
  if (event.keyCode === 16 && !isInputField(document.activeElement)) { // If LSHIFT pressed
    skinViewer.playerObject.skin.position.z = -3; // Move the player's skin so that it looks like they're shifting
    skinViewer.playerObject.skin.leftArm.rotation.x = Math.PI * 15 / 180;
      skinViewer.playerObject.skin.leftArm.position.z = 4;
      skinViewer.playerObject.skin.leftArm.position.y = -4;

      skinViewer.playerObject.skin.rightArm.rotation.x = Math.PI * 15 / 180;
      skinViewer.playerObject.skin.rightArm.position.z = 4;
      skinViewer.playerObject.skin.rightArm.position.y = -4;

      skinViewer.playerObject.skin.head.position.z = 5.5;
      skinViewer.playerObject.skin.head.position.y = -1.5;



      skinViewer.playerObject.skin.body.rotation.x = Math.PI * 20 / 180;
      skinViewer.playerObject.skin.body.position.z = 2;
      skinViewer.playerObject.skin.body.position.y = -6;
  }
});

document.addEventListener('keyup', function(event) {
  if (event.keyCode === 16 && !isInputField(document.activeElement)) {
    skinViewer.playerObject.skin.position.z = 0; // Reset the skin if LSHIFT was released
    skinViewer.playerObject.skin.leftArm.rotation.x = 0;
      skinViewer.playerObject.skin.leftArm.position.z = 0;
      skinViewer.playerObject.skin.leftArm.position.y = -2;

      skinViewer.playerObject.skin.rightArm.rotation.x = 0;
      skinViewer.playerObject.skin.rightArm.position.z = 0;
      skinViewer.playerObject.skin.rightArm.position.y = -2;

      skinViewer.playerObject.skin.head.position.z = 0;
      skinViewer.playerObject.skin.head.position.y = 0;

      skinViewer.playerObject.skin.body.rotation.x = 0;
      skinViewer.playerObject.skin.body.position.z = 0;
      skinViewer.playerObject.skin.body.position.y = -6;
  }
});

      var playerStats = playerData["stats"];
      var profileStats = playerData["profile"];

      var dateNow = new Date();

      var playerRank = profileStats["tag"];
      var playerRankCute = cuteRank(playerRank, 1);

      document.getElementById("card-rank").classList.add("rank-" + playerRankCute[0]); // Changes the rank to the player's rank colour
      document.getElementById("card-name").style.color = `var(--mc` + playerRankCute[0] + `)`; // Changes the player's name to the player's rank colour

      document.getElementById("card-ranktext").innerHTML = playerRankCute[1]; // Adds player's rank
      console.log(playerRankCute)


      document.getElementById("card-name").innerText = playerData["name"];
      document.getElementById("header-name").innerHTML = cuteRank(profileStats["tagged_name"], 0);
      document.getElementById("achievement-points").innerText = (profileStats["achievement_points"]).toLocaleString();
      document.getElementById("karma").innerText = (profileStats["karma"]).toLocaleString();
      console.log((profileStats["karma"]).toLocaleString());
      document.getElementById("quests-completed").innerText = (profileStats["quests_completed"]).toLocaleString();
      document.getElementById("ranks-gifted").innerText = (und(profileStats["ranks_gifted"])).toLocaleString();
      document.getElementById("multiplier").innerText = (profileStats["coin_multiplier"]).toLocaleString();

      var firstLogin = new Date((profileStats["first_login"])); // Used for birthday calculation
      document.getElementById("first-login").innerText = (firstLogin).toLocaleDateString(); // Gets first login in Unix time and turns it into a date
      document.getElementById("first-login-ago").innerHTML = "(" + relativeTime(firstLogin) + ")";

      if((firstLogin.getMonth() == dateNow.getMonth()) && (firstLogin.getDate() == dateNow.getDate()) && (firstLogin.getYear() != dateNow.getYear())) {
        document.getElementById("birthday").style.display = "initial"; // Makes the birthday cake visible if it's your Hypixel anniversary!
        document.getElementById("birthday-text").innerText = ("Happy " + ordinal(dateNow.getYear() - firstLogin.getYear()) + " Hypixel anniversary!");
        console.log("Happy birthday!");
      }
    
      if(profileStats["last_login"] == 0) document.getElementById("last-login-container").style.display = "none";
      else {
        document.getElementById("last-login").innerText = (new Date((profileStats["last_login"]))).toLocaleDateString();
        document.getElementById("last-login-ago").innerHTML = "(" + relativeTime(new Date(profileStats["last_login"])) + ")";
      }
      
      if(playerData["status"]["online"]) { // Checks player's online status
        document.getElementById("online-status").innerText = "Currently Online!";
        document.getElementById("online-status").style.color = "var(--mca)";
      }
      else document.getElementById("online-status").innerText = "Currently Offline";

      if(playerData["guild"] == undefined) {
        console.log(playerData);
        document.getElementById("guild-stats").style.display = "none";
        document.getElementById("card-guild").style.display = "none";
      }
      else {
        guildStats = playerData["guild"];
          document.getElementById("guild-name").innerText = guildStats["name"];
          document.getElementById("guild-tag").innerHTML = generateMinecraftText(guildStats["tag"]);
          document.getElementById("card-guild").innerHTML = generateMinecraftText(guildStats["tag"]);
          document.getElementById("guild-level").innerText = (Math.floor(guildStats["level"])).toLocaleString();
          document.getElementById("guild-members").innerText = (guildStats["members"]).toLocaleString();
          document.getElementById("guild-joined").innerText = new Date(guildStats["joined"]).toLocaleDateString();
          document.getElementById("guild-joined-ago").innerText = "(" + relativeTime(new Date(guildStats["joined"])) + ")";
      } 

      hypixelLevel = profileStats["network_level"];
      document.getElementById("level").innerText = Math.floor(hypixelLevel);
      if(hypixelLevel >= 250) {
        document.getElementById("level-container").style.color = "var(--gold-transparent)";
        document.getElementById("level").style.color = "var(--gold)";
      }

      var xpProgress = ((hypixelLevel % 1) * 100).toFixed(0) + "%"; // Sets user's XP progress and progress bar
      document.getElementById("xp-progress-bar").style.width = xpProgress;
      document.getElementById("xp-progress-number").innerText = xpProgress;

      
      var socials = ["HYPIXEL", "YOUTUBE", "TWITTER", "TIKTOK", "TWITCH", "DISCORD"];
      for(a = 0; a < socials.length; a++) { // Iterates through social media and hides icons that don't exist for the player
        if(profileStats["social_media"][socials[a]] == undefined) {
          document.getElementById("social-" + (socials[a]).toLowerCase()).style.display = "none";
          console.log(profileStats["social_media"]);
        } else if(socials[a] != "DISCORD") {
          socialMediaNew = profileStats["social_media"][socials[a]];
          document.getElementById("sociallink-" + (socials[a]).toLowerCase()).href = !/^https?:\/\//i.test(socialMediaNew) ? `https://${socialMediaNew}` : socialMediaNew; // Adds HTTPS to the URL if it doesn't have it already
        } else {
          document.getElementById("social-discord-username").innerText = profileStats["social_media"][socials[a]];
        }
      }

      document.getElementById("flex-container-0").classList.remove("unloaded");
      document.getElementById("header-name").classList.remove("unloaded");
  }

  function ordinal(num) { // Returns the ordinal number format of an integer (3 ‚Üí 3rd)
    let ordinals = ["st", "nd", "rd"];
    for(a = 0; a < ordinals.length; a++) {
      if(num % 100 !== (11 + a) && num % 10 == (1 + a)) return (num + ordinals[a])
    }
    return num + "th";
  }

  document.getElementById("searchbar").addEventListener("keypress", function(event) { // Check if the user's typing in the search box
    if (event.key === "Enter") { // Did the user press enter?
      event.preventDefault();
      var userInput = this.value.replaceAll(/[^A-Za-z0-9_]/g, ""); // Removes all characters that can't be in a username or UUID
      window.location.href = `/player/${userInput}`; // Redirect to the desired URL
    }
  });
</script> 
</body>
</html>