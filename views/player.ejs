<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/css/stylesheet.css">
  <link rel="shortcut icon" type="image/x-icon" href="/img/logo.png">
  <link rel="preload" href="/img/games/bedwars/lobby.png" as="image">
  <link rel="preload" href="/img/games/skywars/lobby.png" as="image">
  <link rel="preload" href="/img/games/network/lobby.png" as="image">
  <link rel="preload" href="/img/games/duels/lobby.png" as="image">
  <script src="/external/skinview3d.bundle.js" type="module"></script>
  <script src="/external/minecrafttext.js"></script>
  <script src="/external/games.js"></script>
  <meta name="theme-color" content="#f6adc6">
  <meta property="og:site_name" content="nadeshiko.io">
  <meta property="twitter:image" content="https://minotar.net/helm/<%= playerData.uuid %>.png">

  <% if (playerData && playerData.profile) { %>
    <title><%- (playerData["profile"]["tagged_name"]).replace(/¬ß[A-Fa-f0-9]/g, "") %> | nadeshiko.io</title>
    <meta name="description" content="<%= playerData.status.online ? 'üü¢ Online!' : 'üî¥ Offline' %>

‚Ä¢ üåê Network Level: <%-(playerData.profile.network_level).toFixed(2)%>
‚Ä¢ üìú Quests Completed: <%-(playerData.profile.quests_completed).toLocaleString()%>
‚Ä¢ ‚òÆÔ∏è Karma: <%-(playerData.profile.karma).toLocaleString()%>
‚Ä¢ üèÜ Achievement Points: <%-(playerData.profile.achievement_points).toLocaleString()%>
‚Ä¢ üí∏ Ranks Gifted: <%-(playerData.profile.ranks_gifted).toLocaleString()%>">
  <% } else { %>
    <title><%- (playerData["name"]) %> | nadeshiko.io</title> <!-- Fallback in case no stats -->
    <meta name="description" content="üå∏ View Hypixel stats and generate real-time stat cards, perfect for forums signatures or to show off to friends!">
  <% } %>
</head>

<body>
  <div class="background" id="background1"></div>
  <div class="background" id="background2" style="opacity: 0"></div>  
  <div class="background-filter"></div>

  <div class="nadeshiko-wrapper">
    <header>
      <%- include('partials/header') %>
      <div class="header2"> <!-- secondary header for game bar -->
        <div class="header-left">
          <p class="header-name unloaded" id="header-name"><span class="mc">Unknown</span></p>
        </div>
        <div class="header-right" id="game-buttons">
          <p class="header-game" onclick="switchStats('network')" id="button-network">Network</p>
          <p class="header-game" onclick="switchStats('bedwars')"  id="button-bedwars">Bed Wars</p>
          <p class="header-game" onclick="switchStats('duels')"  id="button-duels">Duels</p>
          <p class="header-game" onclick="switchStats('skywars')"  id="button-skywars">SkyWars</p>
          <p class="header-down"><img class="dropdown-arrow" src="/img/arrow.svg" alt="More games"></p>
        </div>
      </div>
    </header>   
    
    <div class="games" id="games">

      <div class="flex-container unloaded" id="flex-container-network"> <!-- network stats -->
        <canvas id="skin-container" class="avatar unloaded" style="background-color: transparent"></canvas>
        <section class="player-card" id="player-card">
          <div class="player-info">
            <div class="details">
              <div class="flex-two-item unless-tiny">
                <span class="player-name">
                  <span class="rank" id="card-rank"><span id="card-ranktext"><span class="mc">Unknown</span></span></span> <span class="m7" id="card-name"><span class="mc">Unknown</span></span> <span id="card-guild"><span class="mc">Unknown</span></span><img class="special icon smallicon unloaded" id="special" alt="User badge">
                </span>
                <span id="online-status"><span class="mc">Unknown</span></span>
              </div>
  
              <div class="extended-card" id="extended-card">
                <div id="real-stats">
                <p id="level-container-container"><span id="level-container">Level <span id="level" class="statistic"><span class="mc">Unknown</span></span></span> <span class="m8">(<span id="multiplier">1</span>&times;)</span></p>
                <div class="progress-bar">
                  <span class="progress-number" id="xp-progress-number"><span class="mc">Unknown</span></span>
                  <div class="progress" style="width: 0%;" id="xp-progress-bar"></div>
                </div>
                <div class="stats">
                  <div class="login-info flex-two-item">
                    <p class="flex-item margin10">First Login <span class="statistic" id="first-login"><span class="mc">Unknown</span></span> <span id="first-login-ago"><span class="mc">Unknown</span></span>
                    <span class="tooltip"><img id="birthday" class="icon tinyicon" src="/icon/cake.png"><span class="tooltiptext" id="birthday-text"></span></span></p>
  
                    <p id="last-login-container" class="flex-item login-duo">Last Login <span class="statistic" id="last-login"><span class="mc">Unknown</span></span> <span id="last-login-ago"><span class="mc">Unknown</span></span></p>
                  </div>
                  <div class="flex-two-item general-guild">
                    <div class="general-stats flex-item">
                      <p class="stat-title">General</p>
                      <p>Achievement Points <span class="statistic" id="achievement-points"><span class="mc">Unknown</span></span></p>
                      <p>Karma <span class="statistic" id="karma"><span class="mc">Unknown</span></span></p>
                      <p>Quests Completed <span class="statistic" id="quests-completed"><span class="mc">Unknown</span></span></p>
                      <p>Ranks Gifted <span class="statistic" id="ranks-gifted"><span class="mc">Unknown</span></span></p>
                    </div>
                    <div class="general-stats flex-item" id="guild-stats">
                      <p class="stat-title">Guild</p>
                      <p>Name <span class="statistic" id="guild-name"><span class="mc">Unknown</span></span> <span id="guild-tag"><span class="mc">Unknown</span></span></span></p>
                      <p>Level <span class="statistic" id="guild-level"><span class="mc">Unknown</span></span></p>
                      <p>Members <span class="statistic" id="guild-members"><span class="mc">Unknown</span></span></p>
                      <p>Joined <span class="statistic" id="guild-joined"><span class="mc">Unknown</span></span> <span id="guild-joined-ago"><span class="mc">Unknown</span></span></p>
                    </div>
                  </div>
                </div>
              </div>
  
                <div id="network-error" style="display: none">
                  <p class="title-text" id="error-title">No Hypixel Stats</p>
                  <p class="subtitle-text" id="error-subtitle">This player has no Hypixel stats.</p>
                </div>
              </div>
              <div class="flex-two-item socials-buttons" id="general-bottom-bar">
                <div class="buttons">
                  <span class="general-button mright">Generate Card</span>
                  
                  <a target="_blank" href="https://sky.shiiyu.moe/stats/<%= playerData.uuid %>" class="mright" style="text-decoration: none;"><span class="general-button"><img src="/img/skycrypt.svg" class="shiiyu" alt="SkyCrypt logo">SkyBlock Stats</span></a>

                  <div class="dropdown">
                  <span class="general-button dropdown-button" onclick="" id="social-media-button">Socials</span>         <div class="dropdown-content unloaded" id="social-media-alternative">
                    <a target="_blank" id="social-hypixel-alternative" aria-label="View Hypixel Forums profile"><span class="logo-container"><img src="/img/hypixel.svg" alt="" class="social-media-dropdown"></span> Hypixel</a>
                    <a target="_blank" id="social-youtube-alternative" aria-label="View linked YouTube"><span class="logo-container"><img src="/img/youtube.svg" alt="" class="social-media-dropdown"></span> YouTube</a>
                    <a target="_blank" id="social-twitter-alternative" aria-label="View linked Twitter"><span class="logo-container"><img src="/img/twitter.svg" alt="" class="social-media-dropdown"></span> Twitter</a>
                    <a target="_blank" id="social-tiktok-alternative" aria-label="View linked TikTok"><span class="logo-container"><img src="/img/tiktok.svg" alt="" class="social-media-dropdown"></span> TikTok</a>
                    <a target="_blank" id="social-twitch-alternative" aria-label="View linked Twitch"><span class="logo-container"><img src="/img/twitch.svg" alt="" class="social-media-dropdown"></span> Twitch</a>
                    <a target="_blank" id="social-discord-alternative" onclick="copyText('social-discord-username', true)" aria-label="View linked Discord"><span class="logo-container"><img src="/img/discord.svg" alt="" class="social-media-dropdown"></span> <span id="social-discord-username-alternative">Discord</span></a>
                </div></div>
                </div>
                
                <div class="socials flex-two-item flex-separated" id="social-media">
                  <a target="_blank" id="sociallink-hypixel" aria-label="View Hypixel Forums profile"><img src="/img/hypixel.svg" class="social-media-logo mright" id="social-hypixel" alt="Hypixel logo"></a>
                  <a target="_blank" id="sociallink-youtube" aria-label="View linked YouTube"><img src="/img/youtube.svg" class="social-media-logo mleft mright" id="social-youtube" alt="YouTube logo"></a>
                  <a target="_blank" id="sociallink-twitter" aria-label="View linked Twitter"><img src="/img/twitter.svg" class="social-media-logo mright mleft" id="social-twitter" alt="Twitter logo"></a>
                  <a target="_blank" id="sociallink-tiktok" aria-label="View linked TikTok"><img src="/img/tiktok.svg" class="social-media-logo mleft mright" id="social-tiktok" alt="TikTok logo"></a>
                  <a target="_blank" id="sociallink-twitch" aria-label="View linked Twitch"><img src="/img/twitch.svg" class="social-media-logo mright mleft" id="social-twitch" alt="Twitch logo"></a>
                  <a target="_blank" id="sociallink-discord" onclick="copyText('social-discord-username', true)" aria-label="View linked Discord" style="display: flex; align-items: center"><img src="/img/discord.svg" class="mleft social-media-discord" id="social-discord" alt="Discord logo"><p class="w500 mleft" id="social-discord-username"></p></a>
                </div>
              </div>
            </div>
          </div>
  
        </section>
      </div>


      
      <div class="flex-container unloaded" id="flex-container-bedwars">
        <!-- bed wars stats -->
        <div class="chip-container" id="bed-wars-chips">
          <div class="chip-small but-big">
            <div class="chip-small-background-filter"></div>
            <p class="chip-small-title">Bed Wars</p>
            <div class="chip-small-container">
              <p class="margin10">
                <span id="bed-wars-level-container" class="linear-gradient">Level <span class="w500" id="bed-wars-level"></span></span>
              </p>
              <div class="progress-bar">
                <span class="progress-number" id="bed-wars-xp-progress-number"><span class="mc">Unknown</span></span>
                <div class="progress" style="width: 0%;" id="bed-wars-xp-progress-bar"></div>
              </div>
              <div class="flex-two-item align-top flippable margin10">
                <div class="card-big-stats">
                  <p class="super-subtitle">Stats</p>
                  <div class="chip-small-statistic-row">
                      <p>Winstreak <span class="statistic" id="bed-wars-overall-winstreak"></span></p>
                  </div>
                  <div class="chip-small-statistic-row">
                      <p>Wins <span class="statistic" id="bed-wars-overall-wins"><span class="mc">Unknown</span></span></p>
                      <p>Losses <span class="statistic" id="bed-wars-overall-losses"><span class="mc">Unknown</span></span></p>
                      <p>W L/R <span class="statistic" id="bed-wars-overall-wlr"><span class="mc">Unknown</span></span></p>
                  </div>
                  <div class="chip-small-statistic-row">
                      <p>Kills <span class="statistic" id="bed-wars-overall-kills"><span class="mc">Unknown</span></span></p>
                      <p>Deaths <span class="statistic" id="bed-wars-overall-deaths"><span class="mc">Unknown</span></span></p>
                      <p>K/D R <span class="statistic" id="bed-wars-overall-kdr"><span class="mc">Unknown</span></span></p>
                  </div>
                  <div class="chip-small-statistic-row">
                      <p>Final Kills <span class="statistic" id="bed-wars-overall-final_kills"><span class="mc">Unknown</span></span></p>
                      <p>Final Deaths <span class="statistic" id="bed-wars-overall-final_deaths"><span class="mc">Unknown</span></span></p>
                      <p>FK/D R <span class="statistic" id="bed-wars-overall-fkdr"><span class="mc">Unknown</span></span></p>
                  </div>
                  <div class="chip-small-statistic-row">
                      <p>Beds Broken <span class="statistic" id="bed-wars-overall-beds_broken"><span class="mc">Unknown</span></span></p>
                      <p>Beds Lost <span class="statistic" id="bed-wars-overall-beds_lost"><span class="mc">Unknown</span></span></p>
                      <p>BB/L R <span class="statistic" id="bed-wars-overall-bblr"><span class="mc">Unknown</span></span></p>
                  </div>
                </div>
                <div class="card-big-misc">
                  <p class="super-subtitle">Misc</p>
                  <div class="chip-small-statistic-row">
                      <p>Tokens <span class="statistic" id="bed-wars-tokens"><span class="mc">Unknown</span></span></p>
                  </div>
                  <div class="chip-small-statistic-row">
                    <p>Slumber Tickets <span class="statistic" id="bed-wars-slumber-tickets">0</span></p>
                  </div>
                  <div class="chip-small-statistic-row">
                    <p>Challenges Completed <span class="statistic" id="bed-wars-challenges-completed"><span class="mc">Unknown</span></span> <span class="m8" id="bed-wars-unique-challenges-completed">(0/30)</span></p>
                  </div>
                </div>
              </div>
            </div>
            <span class="general-button mright margin-top-bottom">Generate Card</span>
          </div>
        </div>
    </div>

    <div class="flex-container unloaded" id="flex-container-skywars">
      <section class="player-card" id="player-card" style="align-content: center;">
        <p class="title-text">Coming soon!</p>
        <p class="subtitle-text">We'll be adding SkyWars to nadeshiko shortly.</p>
      </section>
    </div>

    <div class="flex-container unloaded" id="flex-container-duels">
      <section class="player-card" id="player-card" style="align-content: center;">
        <p class="title-text">Coming soon!</p>
        <p class="subtitle-text">We'll be adding Duels to nadeshiko shortly.</p>
      </section>
    </div>

  </div>

  <div class="quick-mode hidden pushdown" id="quick-mode">
    <section class="player-card" id="player-card" style="align-content: center;">
      <p class="title-text margin-top-bottom">Quick Mode</p>
      <p class="subtitle-text">Click an icon to instantly go to that game's page for <span id="quick-mode-username"></span>.</p>
      <p class="flex-quick-mode margin-top-bottom">
        <span class="tooltip quick-mode-game-container"><img src="/img/icon/skyblock.png" class="quick-mode-game" onclick="switchStats('skyblock')"><span class="tooltiptext">SkyBlock</span></span></span>
        <span class="tooltip"><img src="/img/icon/bedwars.png" class="quick-mode-game" onclick="switchStats('bedwars')"><span class="tooltiptext">Bed Wars</span></span></span>
        <span class="tooltip"><img src="/img/icon/duels.png" class="quick-mode-game" onclick="switchStats('duels')"><span class="tooltiptext">Duels</span></span></span>
        <span class="tooltip"><img src="/img/icon/skywars.png" class="quick-mode-game" onclick="switchStats('skywars')"><span class="tooltiptext">SkyWars</span></span>
        <span class="tooltip"><img src="/img/icon/arcade.png" class="quick-mode-game" onclick="switchStats('arcade')"><span class="tooltiptext">Arcade</span></span></span>
        <span class="tooltip"><img src="/img/icon/buildbattle.png" class="quick-mode-game" onclick="switchStats('buildbattle')"><span class="tooltiptext">Build Battle</span></span></span>
        <span class="tooltip"><img src="/img/icon/murdermystery.png" class="quick-mode-game" onclick="switchStats('murdermystery')"><span class="tooltiptext">Murder Mystery</span></span></span>
        <span class="tooltip"><img src="/img/icon/tntgames.png" class="quick-mode-game" onclick="switchStats('tntgames')"><span class="tooltiptext">TNT Games</span></span></span>
        <span class="tooltip"><img src="/img/icon/pit.png" class="quick-mode-game" onclick="switchStats('pit')"><span class="tooltiptext">Pit</span></span></span>
      </p>
      <p class="flex-quick-mode margin-top-bottom">
        <span class="tooltip"><img src="/img/icon/blitz.png" class="quick-mode-game" onclick="switchStats('blitz')"><span class="tooltiptext">Blitz</span></span></span>
        <span class="tooltip"><img src="/img/icon/classic.png" class="quick-mode-game" onclick="switchStats('classic')"><span class="tooltiptext">Classic Games</span></span></span>
        <span class="tooltip"><img src="/img/icon/copsandcrims.png" class="quick-mode-game" onclick="switchStats('copsandcrims')"><span class="tooltiptext">Cops and Crims</span></span></span>
        <span class="tooltip"><img src="/img/icon/uhc.png" class="quick-mode-game" onclick="switchStats('uhc')"><span class="tooltiptext">UHC</span></span></span>
        <span class="tooltip"><img src="/img/icon/smashheroes.png" class="quick-mode-game" onclick="switchStats('smashheroes')"><span class="tooltiptext">Smash Heroes</span></span></span>
        <span class="tooltip"><img src="/img/icon/megawalls.png" class="quick-mode-game" onclick="switchStats('megawalls')"><span class="tooltiptext">Mega Walls</span></span></span>
        <span class="tooltip"><img src="/img/icon/woolwars.png" class="quick-mode-game" onclick="switchStats('woolwars')"><span class="tooltiptext">Wool Wars</span></span></span>
        <span class="tooltip"><img src="/img/icon/warlords.png" class="quick-mode-game" onclick="switchStats('warlords')"><span class="tooltiptext">Warlords</span></span></span>
      </p>
    </section>
  </div>
    <footer>
      <%- include('partials/footer') %>
    </footer>
  </div>

<script>
  var playerData;
  var currentGamemode = "network";
  switchStats(currentGamemode);
  var mobileMode = (document.documentElement.clientWidth < 800);

  document.documentElement.style.setProperty('--accent', getComputedStyle(document.documentElement).getPropertyValue('--accent-' + currentGamemode));

  function und(text) { // Returns 0 in the case of a missing value
    if (text === null || text === undefined || Number.isNaN(text)) return 0;
    else return text;
  }

  playerName = "<%= name %>";
  playerData = JSON.parse(decodeURIComponent("<%- encodeURIComponent(JSON.stringify(playerData)) %>"));
  console.log(playerData);
  insertLoadedData();

  document.addEventListener("DOMContentLoaded", function() { // Runs on page load
    try {
     skinViewer = new skinview3d.SkinViewer({ // Imports SkinView3D for the 3D skin.
         canvas: document.getElementById("skin-container"),
         width: 300,
         height: 400,
         model: (playerData["slim"] ? "slim" : "classic"),
         skin: playerData["skin"],
         cape: playerData["cape"]
     });

     skinViewer.camera.position.set(-30, 9, 50); // Sets player orientation
     skinViewer.animation = new skinview3d.IdleAnimation();
     skinViewer.playerObject.cape.rotation.x = 1;

     skinViewer.controls.enableZoom = false;


     document.addEventListener('keydown', function(event) {
         if (event.keyCode === 16 && !isInputField(document.activeElement)) { // If LSHIFT pressed, adjust skin to sneak based on constants from Mine-imator
             skinViewer.animation.paused = true; // Cape can't move in the x direction while idle animation is on
             let skinViewerObject = skinViewer.playerObject;
             let skinViewerSkin = skinViewerObject.skin;

             skinViewerSkin.head.position.y = -2.5;

             skinViewerSkin.body.rotation.x = 0.4887;
             skinViewerSkin.body.position.y = -7;
             skinViewerSkin.body.position.z = -2;

             skinViewerSkin.leftArm.rotation.x = 0.3491;
             skinViewerSkin.leftArm.position.y = -3.5;

             skinViewerSkin.rightArm.rotation.x = 0.3491;
             skinViewerSkin.rightArm.position.y = -3.5;

             skinViewerSkin.leftLeg.position.x = 2;
             skinViewerSkin.leftLeg.position.y = -11;
             skinViewerSkin.leftLeg.position.z = -3.5;

             skinViewerSkin.rightLeg.position.x = -2;
             skinViewerSkin.rightLeg.position.y = -11;
             skinViewerSkin.rightLeg.position.z = -3.5;

             skinViewerObject.cape.rotation.x = 0.4365;
             skinViewerObject.cape.position.y = 7;
             skinViewerObject.cape.position.z = -2;
         }
     });


     document.addEventListener('keyup', function(event) {
         if (event.keyCode === 16) { // Removes sneak; sets values to defaults
             skinViewer.animation.paused = false;
             let skinViewerSkin = skinViewer.playerObject.skin;
             let skinViewerObject = skinViewer.playerObject;

             skinViewerSkin.head.position.y = 0;

             skinViewerSkin.body.rotation.x = 0;
             skinViewerSkin.body.position.y = -6;
             skinViewerSkin.body.position.z = 0;

             skinViewerSkin.leftArm.position.y = -2;
             skinViewerSkin.leftArm.rotation.x = 0;

             skinViewerSkin.rightArm.rotation.x = 0;
             skinViewerSkin.rightArm.position.y = -2;

             skinViewerSkin.leftLeg.position.x = 2;
             skinViewerSkin.leftLeg.position.y = -12;
             skinViewerSkin.leftLeg.position.z = 0;

             skinViewerSkin.rightLeg.position.x = -2;
             skinViewerSkin.rightLeg.position.y = -12;
             skinViewerSkin.rightLeg.position.z = 0;

             skinViewerObject.cape.rotation.x = 1.5714;
             skinViewerObject.cape.position.y = 8;
             skinViewerObject.cape.position.z = -2;
         }
     });

     document.getElementById("skin-container").classList.remove("unloaded");
 } catch (error) {
     console.error("Error loading SkinView3D!: " + error);
 }

    document.getElementById("flex-container-" + currentGamemode).classList.remove("unloaded");
      document.getElementById("header-name").classList.remove("unloaded");
  });

  function relativeTime(timestamp, currentTime = Date.now()) { // Returns a timestamp showing how long ago a date was in the past.
    let dateNew = new Date(currentTime);
    let dateOld = new Date(timestamp);

    let years = dateNew.getFullYear() - dateOld.getFullYear();
    let months = dateNew.getMonth() - dateOld.getMonth();
    let days = dateNew.getDate() - dateOld.getDate();
    let hours = dateNew.getHours() - dateOld.getHours();
    let minutes = dateNew.getMinutes() - dateOld.getMinutes();
    let seconds = dateNew.getSeconds() - dateOld.getSeconds();

    if (seconds < 0) {
      minutes--;
      seconds += 60;
    }

    if (minutes < 0) {
      hours--;
      minutes += 60;
    }

    if (hours < 0) {
      days--;
      hours += 24;
    }

    if (days < 0) {
      months--;
      days += new Date(dateOld.getFullYear(), dateOld.getMonth() + 1, 0).getDate(); // Ensures that a month has the correct number of days.
    }

    if (months < 0) {
      years--;
      months += 12;
    }

    if (years > 0) return `${years}y ago`;
    if (months > 0) return `${months}m ago`;
    if (days > 0) return `${days}d ago`;
    if (hours > 0) return `${hours}h ago`;
    if (minutes > 0) return `${minutes}min ago`;
    if (seconds > 0) return `${seconds}s ago`;
    return "now!";
  }

  function cuteRank(text, style = 0) {
    if(style == 0) return generateMinecraftText(text);
    else {
      var playerRankColorRegexMatch = (text.match(/¬ß([0-9a-f])/));
      var playerRankColor = (playerRankColorRegexMatch == null) ? "7" : (playerRankColorRegexMatch)[1];

      if(playerRankColorRegexMatch != null) { var playerRankRest = (text.substring(2)).replace(/\[|\]/g, "") }
      else { var playerRankRest = text } // Emergency fallback if no section code is detected

      return([playerRankColor, generateMinecraftText(playerRankRest)]);
    }
  }


function isInputField(element) { // Determines if the user's actively in an input field (so Quick Mode and easter eggs don't get messed up)
  return (
    element.tagName === 'INPUT' || 
    element.tagName === 'TEXTAREA' || 
    element.isContentEditable
  );
}

function generateChip(stats_object, where) { // Converts an array of stats into an HTML chip for stats viewing

  console.log("generating stats object")

  var fullCard = "";
  var selectionItems = "";

  fullCard += `<div class="chip-small"` + (stats_object[3] == undefined ? `>` : ` style="background-image: url(` + stats_object[3] + `);">`); // Adds parent div, background

  for(c = 0; c < stats_object[5].length; c++) {
    selectionItems += `<option value="` + stats_object[5][c][1] + `">` + stats_object[5][c][0] + `</option>`;
  }
  if(stats_object[5].length > 0) {
    selectionItems = `<div class="chip-small-dropdown"><select aria-label="` + stats_object[1] +` Mode" onchange="updateChipStats(event, '` + stats_object[0] + `')">` + selectionItems + `</select></div>`;
  } else {
    selectionItems = "";
  }

  fullCard += `<div class="chip-small-top"><div class="chip-small-background-filter"></div> <p class="chip-small-title">` + stats_object[1] + `</p>` + selectionItems + `</div><p class="chip-small-subtitle">` + stats_object[2] + `</p><div class="chip-small-container" id="`+ stats_object[0] +`">`; // Adds title

  fullCard += generateChipStats(stats_object[4]);

  fullCard += `</div></div>`;

  document.getElementById(where).insertAdjacentHTML("beforeend", fullCard);
}

function generateChipStats(chipStatsSub) { // Generates the stats inside of the chip
  let chipStats = "";

  for(a = 0; a < chipStatsSub.length; a++) { // For each row in the chip
    chipStats += `<div class="chip-small-statistic-row">`;
    for(b = 1; b < chipStatsSub[a].length; b++) {
      chipItem = chipStatsSub[a][b];
      if(chipItem != undefined) {
        chipStats += `<p>` + chipItem[0] + ` ` + `<span class="statistic">` + chipItem[1] + `</span></p>`;
      }
    }
    // add additional margin later
    chipStats += `</div>`;

  }
  return chipStats;
}

function openSelectedDropdown(dropdownId) {
  console.log("removed" + dropdownId)

  console.log(document.getElementById(dropdownId).classList)
    document.getElementById(dropdownId).classList.remove("unloaded");
    console.log(document.getElementById(dropdownId).classList)
}

document.querySelector('.dropdown-button').addEventListener('click', function() { // Opens dropdown on click (they need to make styles better)
    var dropdownContent = this.nextElementSibling;

    if (dropdownContent.classList.contains("unloaded")) { // If not visible
      dropdownContent.style.bottom = 'auto';
      dropdownContent.style.top = 'auto';
      var dropdownRect = dropdownContent.getBoundingClientRect();
      if (window.innerHeight - dropdownRect.bottom < 30 || mobileMode) { // Check if dropdown goes off the bottom of the page
          dropdownContent.style.bottom = '100%'; // Adjust it if it does
          dropdownContent.style.top = 'auto'; 
      } else {
        dropdownContent.style.bottom = 'auto';
        dropdownContent.style.top = '100%';
      }
    }

    dropdownContent.classList.toggle('unloaded');
});


window.onclick = function(event) {
  if (!event.target.matches('#social-media-button')) {
    var dropdowns = document.getElementsByClassName("dropdown-content");
    for (var i = 0; i < dropdowns.length; i++) {
      var openDropdown = dropdowns[i];
      if (!openDropdown.classList.contains("unloaded")) {
        openDropdown.classList.add("unloaded");
      }
    }
  }
}

function redirectToHttps() { // If the user's on the HTTP version of nadeshiko, switch to HTTPS
  windowLocation = window.location;

  if(windowLocation.protocol == "http:" && windowLocation.host != "localhost:8080") { // If the user's using HTTP (and it's not localhost)
      window.location = "https://nadeshiko.io" + windowLocation.pathname + windowLocation.search;
  }
}

var skinViewer;

 function insertLoadedData() {
      var playerStats = playerData["stats"];
      var profileStats = playerData["profile"];

      var dateNow = new Date();

      redirectToHttps();

      if(profileStats != undefined) {
        var playerRank = profileStats["tag"];
        var playerRankCute = cuteRank(playerRank, 1);

        document.getElementById("card-rank").classList.add("rank-" + playerRankCute[0]); // Changes the rank to the player's rank colour
        document.getElementById("card-name").style.color = `var(--mc` + playerRankCute[0] + `)`; // Changes the player's name to the player's rank colour
        document.getElementById("quick-mode-username").style.color = `var(--mc` + playerRankCute[0] + `)`;

        document.getElementById("card-ranktext").innerHTML = playerRankCute[1]; // Adds player's rank

        document.getElementById("card-name").innerText = playerData["name"];
        document.getElementById("quick-mode-username").innerText = playerData["name"];
        document.getElementById("header-name").innerHTML = cuteRank(profileStats["tagged_name"], 0);
        document.getElementById("achievement-points").innerText = (profileStats["achievement_points"]).toLocaleString();
        document.getElementById("karma").innerText = (profileStats["karma"]).toLocaleString();
        console.log((profileStats["karma"]).toLocaleString());
        document.getElementById("quests-completed").innerText = (profileStats["quests_completed"]).toLocaleString();
        document.getElementById("ranks-gifted").innerText = (und(profileStats["ranks_gifted"])).toLocaleString();
        document.getElementById("multiplier").innerText = (profileStats["coin_multiplier"]).toLocaleString();

        var firstLogin = new Date((profileStats["first_login"])); // Used for birthday calculation
        document.getElementById("first-login").innerText = (firstLogin).toLocaleDateString(); // Gets first login in Unix time and turns it into a date
        document.getElementById("first-login-ago").innerHTML = "(" + relativeTime(firstLogin) + ")";

        if((firstLogin.getMonth() == dateNow.getMonth()) && (firstLogin.getDate() == dateNow.getDate()) && (firstLogin.getYear() != dateNow.getYear())) {
          document.getElementById("birthday").style.display = "initial"; // Makes the birthday cake visible if it's your Hypixel anniversary!
          document.getElementById("birthday-text").innerText = ("Happy " + ordinal(dateNow.getYear() - firstLogin.getYear()) + " Hypixel anniversary!");
          console.log("Happy anniversary!");
        }
      
        if(profileStats["last_login"] == 0) document.getElementById("last-login-container").style.display = "none";
        else {
          document.getElementById("last-login").innerText = (new Date((profileStats["last_login"]))).toLocaleDateString();
          document.getElementById("last-login-ago").innerHTML = "(" + relativeTime(new Date(profileStats["last_login"])) + ")";
        }
        
        if(playerData["status"]["online"]) { // Checks player's online status
          document.getElementById("online-status").innerText = "Currently Online!";
          document.getElementById("online-status").style.color = "var(--mca)";
        }
        else document.getElementById("online-status").innerText = "Currently Offline";

        if(playerData["guild"] == undefined) {
          console.log(playerData);
          document.getElementById("guild-stats").style.display = "none";
          document.getElementById("card-guild").style.display = "none";
        }
        else {
          guildStats = playerData["guild"];
            document.getElementById("guild-name").innerText = guildStats["name"];
            document.getElementById("guild-tag").innerHTML = generateMinecraftText(guildStats["tag"]);
            document.getElementById("card-guild").innerHTML = generateMinecraftText(guildStats["tag"]);
            document.getElementById("guild-level").innerText = (Math.floor(guildStats["level"])).toLocaleString();
            document.getElementById("guild-members").innerText = (guildStats["members"]).toLocaleString();
            document.getElementById("guild-joined").innerText = new Date(guildStats["joined"]).toLocaleDateString();
            document.getElementById("guild-joined-ago").innerText = "(" + relativeTime(new Date(guildStats["joined"])) + ")";
        } 

        hypixelLevel = profileStats["network_level"];
        document.getElementById("level").innerText = Math.floor(hypixelLevel);
        if(hypixelLevel >= 250) {
          document.getElementById("level-container").style.color = "var(--gold-transparent)";
          document.getElementById("level").style.color = "var(--gold)";
        }

        var xpProgress = ((hypixelLevel % 1) * 100).toFixed(0) + "%"; // Sets user's XP progress and progress bar
        document.getElementById("xp-progress-bar").style.width = xpProgress;
        document.getElementById("xp-progress-number").innerText = xpProgress;

        if(Object.keys(profileStats["social_media"]).length != 0) {
          document.getElementById("social-media-alternative").style.display = "";
        }
        var socials = ["HYPIXEL", "YOUTUBE", "TWITTER", "TIKTOK", "TWITCH", "DISCORD"];
        for(a = 0; a < socials.length; a++) { // Iterates through social media and hides icons that don't exist for the player
          if(profileStats["social_media"][socials[a]] == undefined) {
            document.getElementById("social-" + (socials[a]).toLowerCase()).style.display = "none";
            document.getElementById("social-" + (socials[a]).toLowerCase() + "-alternative").style.display = "none";
          } else if(socials[a] != "DISCORD") {
            socialMediaNew = profileStats["social_media"][socials[a]];
            socialMediaNewUrl = !/^https?:\/\//i.test(socialMediaNew) ? `https://${socialMediaNew}` : socialMediaNew; // Adds HTTPS to the URL if it doesn't have it already

            document.getElementById("sociallink-" + (socials[a]).toLowerCase()).href = socialMediaNewUrl;
            document.getElementById("social-" + (socials[a]).toLowerCase() + "-alternative").href = socialMediaNewUrl;
          } else {
            document.getElementById("social-discord-username").innerText = profileStats["social_media"][socials[a]];
            document.getElementById("social-discord-username-alternative").innerText = profileStats["social_media"][socials[a]];
          }
        }
        
        generateBedWars();

      } else { // If no Hypixel stats, hide most buttons and show a warning
        document.getElementById("general-bottom-bar").style.display = "none";
        document.getElementById("card-name").innerText = playerData["name"];
        document.getElementById("header-name").innerText = playerData["name"];
        document.getElementById("game-buttons").style.display = "none";
        document.getElementById("card-ranktext").style.display = "none";
        document.getElementById("card-guild").style.display = "none";
        document.getElementById("online-status").style.display = "none";
        document.getElementById("real-stats").style.display = "none";
        document.getElementById("network-error").style.display = "unset";
        
        document.getElementById("player-card").style.paddingLeft = "0px";
        document.getElementById("player-card").style.paddingRight = "0px";
        document.getElementById("player-card").style.paddingBottom = "0px";
        document.getElementById("extended-card").style.marginBottom = "0px";
      }      

      console.log("Wow! All the stats are loaded!");
  }

  function ordinal(num) { // Returns the ordinal number format of an integer (3 ‚Üí 3rd)
    let ordinals = ["st", "nd", "rd"];
    for(a = 0; a < ordinals.length; a++) {
      if(num % 100 !== (11 + a) && num % 10 == (1 + a)) return (num + ordinals[a])
    }
    return num + "th";
  }


  function switchStats(gamemode) {
    //if(gamemode != currentGamemode) {
      document.getElementById("button-" + currentGamemode).classList.remove("highlighted");
      document.getElementById("flex-container-" + currentGamemode).classList.add("unloaded");
      
      currentGamemode = gamemode;

      document.getElementById("button-" + currentGamemode).classList.add("highlighted");
      document.documentElement.style.setProperty('--accent', getComputedStyle(document.documentElement).getPropertyValue('--accent-' + currentGamemode));
      document.getElementById("flex-container-" + currentGamemode).classList.remove("unloaded");
      setBackground(currentGamemode);
    //}
  }

  function setBackground(gamemode) { // Allows a fade between two backgrounds. Is this totally inefficient? Probably
     const bg1 = document.getElementById("background1");
     const bg2 = document.getElementById("background2");
     if (bg1.style.opacity == '1' || bg1.style.opacity === '') {
       bg2.style.backgroundImage = "url('/img/games/" + gamemode + "/lobby.png')";
       bg1.style.opacity = '0';
       bg2.style.opacity = '1';
     } else {
       bg1.style.backgroundImage = "url('/img/games/" + gamemode + "/lobby.png')";
       bg2.style.opacity = '0';
       bg1.style.opacity = '1';
     }
   }

  function copyText(text, isDocumentId) {
    if(isDocumentId) {
      navigator.clipboard.writeText(document.getElementById(text).innerText);
    } else {
      navigator.clipboard.writeText(text);
    }
  }


  function onShiftDown() {
    console.log("Shift pressed");
    document.getElementById("games").classList.add("pushup");
    document.getElementById("games").classList.add("o30");
    document.getElementById("quick-mode").classList.remove("pushdown");
    document.getElementById("quick-mode").classList.remove("hidden");
  }

  function onShiftUp() {
      console.log("Shift released");
      document.getElementById("games").classList.remove("pushup");
      document.getElementById("games").classList.remove("o30");
      document.getElementById("quick-mode").classList.add("pushdown");
      document.getElementById("quick-mode").classList.add("hidden");
  }

  let isShiftPressed = false;

  function handleKeyDown(event) {
      if (event.key === "Shift" && !isShiftPressed) {
          isShiftPressed = true;
          onShiftDown();
      }
  }

  function handleKeyUp(event) {
      if (event.key === "Shift" && isShiftPressed) {
          isShiftPressed = false;
          onShiftUp();
      }
  }

  function handleVisibilityChange() {
      if (document.visibilityState === 'visible' && isShiftPressed) {
          isShiftPressed = false;
          onShiftUp();
      }
  }

  document.addEventListener('keydown', handleKeyDown);
  document.addEventListener('keyup', handleKeyUp);
  document.addEventListener('visibilitychange', handleVisibilityChange);
</script> 
</body>
</html>