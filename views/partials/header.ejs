<div class="header header1">
  <!-- site-wide header -->
  <div class="header-left">
    <a href="/" style="display: flex;">
      <img class="logo icon" src="/img/nadeshiko_logo.png" alt="nadeshiko logo" />
      <div class="wordmark" aria-hidden="true">
        <span style="--delay: 0s;">n</span><span style="--delay: 0.05s;">a</span><span style="--delay: 0.1s;">d</span><span style="--delay: 0.15s;">e</span><span style="--delay: 0.2s;">s</span><span style="--delay: 0.25s;">h</span><span style="--delay: 0.3s;">i</span><span style="--delay: 0.35s;">k</span><span style="--delay: 0.4s;">o</span>
      </div>
    </a>
    <a href="/" class="header-button" aria-label="Link to home page"><img src="/img/svg/home.svg" class="header-icon" alt="" /><span class="header-button-text" data-t="header.home.title">Home</span></a>
    <a href="/leaderboards" class="header-button" aria-label="Link to leaderboards page"><img src="/img/svg/leaderboards.svg" class="header-icon" alt="" /><span class="header-button-text" data-t="leaderboards.title">Leaderboards</span></a>
  </div>
  <div class="header-right">
    <p class="header-button" onclick="showAbout()" id="button-about"><img src="/img/svg/about.svg" class="header-icon" alt="" /><span class="header-button-text" data-t="header.about.title">About</span></p>
    <p class="header-button" onclick="showCardWizard()" id="button-card-wizard"><img src="/img/svg/cards.svg" class="header-icon" alt="" /><span class="header-button-text" data-t="header.cards.title">Cards</span></p>
    <p class="header-button" onclick="showSettings()" id="button-settings"><img src="/img/svg/settings.svg" class="header-icon" alt="" /><span class="header-button-text" data-t="header.settings.title">Settings</span></p>
    <div class="searchbar-container" id="header-searchbar-container">
      <img src="/img/svg/search.svg" alt="" class="search-icon" id="search-icon" />
      <input type="search" class="searchbar" id="searchbar" data-t="header.searchbar.placeholder" placeholder="Search for a player..." spellcheck="false" autocomplete="off" autocapitalize="none" autocorrect="off" />
      <div class="searchbar-selector">
        <div class="flex-two-item-basic" style="justify-content: end">
          <p class="header-button selector-button selected scope-player" onmousedown="changeScope('player', 'header')"><img src="/img/logo/hypixel_logo.webp" class="header-icon selector-icon icon" alt=""><span data-t="games.modes.all.stats">Stats</span></p>
          <p class="header-button selector-button scope-guild" onmousedown="changeScope('guild', 'header')"><img src="/img/icon/minecraft/head_guild.webp" class="header-icon selector-icon icon" alt=""><span data-t="games.modes.network.guild">Guild</span></p>
        </div>
        <div class="flex-two-item-basic" style="justify-content: end">
          <p class="header-button selector-button scope-achievements" onmousedown="changeScope('achievements', 'header')"><img src="/img/icon/minecraft/diamond.webp" class="header-icon selector-icon icon" alt=""><span data-t="achievements.achievements">Achievements</span></p>
          <p class="header-button selector-button scope-quests" onmousedown="changeScope('quests', 'header')"><img src="/img/icon/minecraft/writable_book.webp" class="header-icon selector-icon icon" alt=""><span data-t="quests.quests">Quests</span></p>
        </div>
      </div>
    </div>
  </div>
</div>
<div id="modal-card-wizard" class="modal unloaded">
  <div class="about" id="card-wizard-ui">
    <p class="about-title" data-t="header.cards.title">Cards</p>
    <p class="stat-subtitle">
      <span data-t="header.cards.description_0">Use this tool to generate cute cards that you can put anywhere – even in your Hypixel Forums signature!</span>
      <br />
      <br />
      <span data-t="header.cards.description_1">Cards update in real time as your stats change, so you never have to worry about them!</span>
      <br />
      <br />
      <span data-t="header.cards.warning" style="color: #ff3333">Real-time updating cards currently do not work on the Hypixel Forums as Hypixel has accidentally broken all external images. We are unfortunately unable to fix this. Hypixel has stated that they will "come back to this issue in the near future". However, you can still paste a static version of the card and use that.</span>
    </p>
    <hr style="margin: 20px auto;" />
    <div class="flex-two-item-basic">
      <p class="card-wizard-subtitle" data-t="header.cards.username">Username</p>
      <input type="text" placeholder="Player" id="card-wizard-name" data-t="header.cards.username_placeholder" />
    </div>

    <div class="flex-two-item-basic">
      <p class="tooltip"><span class="card-wizard-subtitle" data-t="header.cards.game">Game</span><span class="tooltiptext" data-t="header.cards.game_tooltip">The game to be used in the card.</span></p>
      <div class="dropdown">
        <p class="dropdown-button chip-dropdown-button card-wizard-button" id="card-wizard-game-button">Network</p>
        <div class="dropdown-content unloaded dropdown-chip dropdown-wizard dropdown-header" id="card-wizard-game" data-game="wizard" data-modify="game">
          <div class="dropdown-item selected" data-item="NETWORK">Network</div>
          <div class="dropdown-item" data-item="SKYBLOCK_GENERAL">SkyBlock – General</div>
          <div class="dropdown-item" data-item="BEDWARS">Bed Wars</div>
          <div class="dropdown-item" data-item="DUELS">Duels</div>
          <div class="dropdown-item" data-item="SKYWARS">SkyWars</div>
          <div class="dropdown-item" data-item="BUILD_BATTLE">Build Battle</div>
        </div>
      </div>
    </div>

    <div class="flex-two-item-basic">
      <p class="tooltip"><span class="card-wizard-subtitle" data-t="header.cards.size">Size</span><span class="tooltiptext" data-t="header.cards.size_tooltip">The height of the card.</span></p>
      <div class="dropdown">
        <p class="dropdown-button chip-dropdown-button card-wizard-button" id="card-wizard-size-button">Full</p>
        <div class="dropdown-content unloaded dropdown-chip dropdown-wizard dropdown-header" id="card-wizard-size" data-game="wizard" data-modify="size">
          <div class="dropdown-item selected" data-item="FULL">Full</div>
        </div>
      </div>
    </div>

    <div class="flex-two-item-basic">
      <p class="tooltip"><span class="card-wizard-subtitle" data-t="header.cards.format">Format</span><span class="tooltiptext" data-t="header.cards.format_tooltip">Where you want to show the card.</span></p>
      <div class="dropdown">
        <p class="dropdown-button chip-dropdown-button card-wizard-button" id="card-wizard-format-button">Hypixel Forums</p>
        <div class="dropdown-content unloaded dropdown-chip dropdown-wizard dropdown-header" id="card-wizard-format" data-game="wizard" data-modify="format">
          <div class="dropdown-item selected" data-item="bbcode">Hypixel Forums</div>
          <div class="dropdown-item" data-item="full">Raw Link</div>
        </div>
      </div>
    </div>

    <div class="flex-two-item mtop mbottom">
      <span class="general-button" id="generate-card" onclick="generateCard()" style="padding: 10px 20px;" data-t="header.cards.button_generate">Generate Card</span>
      <input type="text" aria-label="Card Wizard Output" id="card-wizard-output" class="card-wizard-output" onclick="this.select()" value='Click "Generate Card" and a link will appear here!' / data-t="header.cards.copy">
    </div>

    <div id="card-wizard-preview">
      <div id="card-wizard-preview-watermark">
        PREVIEW
      </div>
      <svg class="progress-ring" viewBox="0 0 600 200" preserveAspectRatio="xMinYMin meet" id="progress-ring-svg">
        <path
          class="progress-ring-circle"
          id="progress-ring"
          d="
          M 11, 11
           L 589, 11
           L 589, 189
           L 11, 189
           L 11, 11"
          style="stroke-dashoffset: 0px;"
        ></path>
      </svg>
      <p id="card-wizard-preview-message" data-t="header.cards.copy">Click "Generate Card" and a preview will appear here.</p>
      <img src="" id="card-wizard-image" class="card-wizard-image" alt="" />
    </div>
  </div>
</div>

<div class="modal unloaded" id="about">
  <div class="about" id="about-ui">
    <p class="margin10" data-t="header.about.basic"><span class="nadeshiko-bold">nadeshiko</span> is a beautiful, open-source, and easy-to-use Hypixel player stats viewer.</p>
    <p class="margin10" data-t="header.about.assistance">Find a bug or need some assistance? Please let us know on the project's <a href="https://github.com/NadeshikoStats/nadeshiko.io/issues" target="_blank">GitHub page</a>!</p>
    <hr style="margin: 20px auto;" />
    <p class="about-title">Credits</p>

    <p class="flex-two-item-basic about-flex">
      <picture class="picture-credits">
        <source srcset="/img/credits/brookeafk.webp" type="image/webp" />
        <img src="/img/credits/brookeafk.png" alt="" class="about-icon" />
      </picture>
      <strong><a href="https://brookie.dev" target="_blank" data-t="header.about.credits.1_name">BrookeAFK</a></strong> <span data-t="header.about.credits.1_desc">&ndash; Frontend Developer</span>
    </p>
    <p class="flex-two-item-basic about-flex">
      <picture class="picture-credits">
        <source srcset="/img/credits/niqumu.webp" type="image/webp" />
        <img src="/img/credits/niqumu.png" alt="" class="about-icon" />
      </picture>
      <strong><a href="https://niqumu.dev" target="_blank" data-t="header.about.credits.0_name">niqumu</a></strong>
      <span data-t="header.about.credits.0_desc">&ndash; Backend Developer</span>
    </p>
    <hr style="opacity: 0;" />
    <p class="flex-two-item-basic about-flex">
      <picture class="picture-credits">
        <source srcset="/img/credits/skinview3d.webp" type="image/webp" />
        <img src="/img/credits/skinview3d.png" alt="" class="about-icon" />
      </picture>
      <strong><a href="https://github.com/bs-community/skinview3d" target="_blank" data-t="header.about.credits.2_name">skinview3d</a></strong> <span data-t="header.about.credits.2_desc">by Blessing Skin</span>
    </p>
    <p class="flex-two-item-basic about-flex">
      <picture class="picture-credits">
        <source srcset="/img/credits/gsap.webp" type="image/webp" />
        <img src="/img/credits/gsap.png" class="about-icon" alt="" />
      </picture>
      <strong><a href="https://gsap.com/" target="_blank" data-t="header.about.credits.3_name">GSAP</a></strong> <span data-t="header.about.credits.3_desc">by GreenSock</span>
    </p>
    <p class="flex-two-item-basic about-flex">
      <picture class="picture-credits">
        <source srcset="/img/credits/visage.webp" type="image/webp" />
        <img src="/img/credits/visage.png" class="about-icon" alt="" />
      </picture>
      <strong><a href="https://visage.surgeplay.com/" target="_blank" data-t="header.about.credits.4_name">Visage</a></strong> <span data-t="header.about.credits.4_desc">by Una</span>
    </p>
    <p class="flex-two-item-basic about-flex">
      <picture class="picture-credits">
        <source srcset="/img/credits/minotar.webp" type="image/webp" />
        <img src="/img/credits/minotar.png" class="about-icon" alt="" />
      </picture>
      <strong><a href="https://minotar.net/" target="_blank" data-t="header.about.credits.5_name">Minotar</a></strong> <span data-t="header.about.credits.5_desc">by The Minotar Team</span>
    </p>
    <p class="flex-two-item-basic about-flex">
      <picture class="picture-credits">
        <source srcset="/img/credits/skycrypt.webp" type="image/webp" />
        <img src="/img/credits/skycrypt.png" class="about-icon" alt="" />
      </picture>
      <strong><a href="https://github.com/SkyCryptWebsite/SkyCrypt" target="_blank" data-t="header.about.credits.6_name">SkyCrypt</a></strong> <span data-t="header.about.credits.6_desc">by Shiiyu and friends</span>
    </p>
    <p class="flex-two-item-basic about-flex">
      <picture class="picture-credits">
        <source srcset="/img/credits/isometricrenders.webp" type="image/webp">
        <img src="/img/credits/isometricrenders.png" class="about-icon" alt="" />
      </picture>
      <strong><a href="https://github.com/glisco03/isometric-renders" target="_blank" data-t="header.about.credits.7_name">Isometric Renders</a></strong> <span data-t="header.about.credits.7_desc">by gliscowo</span>
    </p>
    <p class="flex-two-item-basic about-flex">
      <picture class="picture-credits">
        <source srcset="/img/credits/complementary.webp" type="image/webp" />
        <img src="/img/credits/complementary.png" class="about-icon" alt="" />
      </picture>
      <strong><a href="https://www.curseforge.com/minecraft/shaders/complementary-unbound" target="_blank" data-t="header.about.credits.8_name">Complementary Shaders</a></strong> <span data-t="header.about.credits.8_desc">by EminGT</span>
    </p>
    <p class="flex-two-item-basic about-flex">
      <picture class="picture-credits">
        <source srcset="/img/credits/lotfolahi.webp" type="image/webp" />
        <img src="/img/credits/lotfolahi.png" class="about-icon" alt="" />
      </picture>
      <strong><a href="https://codepen.io/MAW" target="_blank" data-t="header.about.credits.9_name">GSAP Tutorials</a></strong> <span data-t="header.about.credits.9_desc">by Diaco M Lotfolahi on CodePen</span>
    </p>
    <p class="flex-two-item-basic about-flex">
      <img src="/img/credits/chartjs.svg" class="about-icon" alt="" />
      <strong><a href="https://www.chartjs.org/" target="_blank" data-t="header.about.credits.11_name">Chart.js</a></strong> <span data-t="header.about.credits.11_desc">by Chart.js</span>
    </p>
    <hr style="opacity: 0;" />
    <p class="flex-two-item-basic about-flex">
      <picture class="picture-credits">
        <source srcset="/img/logo/hypixel_logo.webp" type="image/webp" />
        <img src="/img/logo/hypixel_logo.png" class="about-icon" alt="" />
      </picture>
      <strong><a href="https://api.hypixel.net/" target="_blank" data-t="header.about.credits.10_name">Hypixel API</a></strong> <span data-t="header.about.credits.10_desc">by Hypixel</span>
    </p>


    <hr style="opacity: 0;" />
    <p style="opacity: 0.7; font-size: 14px; margin-top: 10px;" data-t="header.about.disclaimer">nadeshiko.io is not affiliated with the Hypixel Network, Mojang AB, or Microsoft.</p>
  </div>
</div>

<div class="modal unloaded" id="modal-settings">
  <div class="about" id="settings-ui">
    <p class="about-title" data-t="header.settings.title">Settings</p>
    <hr style="margin: 20px auto;" />

    <div class="mtop mbottom">
      <div class="flex-two-item">
      <p class="flex-two-item-basic about-flex"><img class="settings-icon" src="/img/svg/globe.svg" alt="" /><span class="w600" data-t="header.settings.language">Language</span></p>
      <div class="dropdown">
        <p class="dropdown-button chip-dropdown-button" id="dropdown-language-button">English</p>
        <div class="dropdown-content unloaded dropdown-chip settings-dropdown dropdown-header" id="dropdown-language" data-game="settings" data-modify="language">
        </div>
      </div>
    </div>
      <p class="settings-description" data-t="header.settings.language_description">Help us translate nadeshiko on <a href="https://crowdin.com/project/nadeshiko" target="_blank">Crowdin</a>!</p>

      <p class="notice flex-display-text flex-two-item-basic" id="settings-language-reload" onclick="location.reload();" style="cursor: pointer; display: none"><span data-t="header.settings.language_reload">Please reload the page to change the language.</span><u data-t="header.settings.language_reload_button">Reload</u><img src="/img/svg/refresh.svg" class="verytinyicon"></p>
    </div>

    <div class="mtop mbottom">
      <div class="flex-two-item">
        <p class="flex-two-item-basic about-flex"><img class="settings-icon" src="/img/svg/gauge.svg" alt="" /><span class="w600" data-t="header.settings.quick_mode">Quick Mode</span></p>
        <input type="checkbox" id="checkbox-quick-mode" class="switch-checkbox settings-checkbox" data-setting="quick-mode" /><label for="checkbox-quick-mode" class="switch-label"><span class="switch-inner"></span></label>
      </div>
      <p class="settings-description" data-t="header.settings.quick_mode_description">Enables the ability to quickly access a gamemode selector by holding <kbd>Shift</kbd>.</p>
    </div>

    <div class="mtop mbottom">
      <div class="flex-two-item">
        <p class="flex-two-item-basic about-flex"><img class="settings-icon" src="/img/svg/settings.svg" alt="" /><span class="w600" data-t="header.settings.default_game">Default Game</span></p>
        <div class="dropdown">
          <p class="dropdown-button chip-dropdown-button" id="dropdown-default-game-button">Network</p>
          <div class="dropdown-content unloaded dropdown-chip settings-dropdown dropdown-header" id="dropdown-default-game" data-game="settings" data-modify="default-game">
            <div class="dropdown-item selected" data-item="network">Network</div>
            <div class="dropdown-item" data-item="bedwars">Bed Wars</div>
            <div class="dropdown-item" data-item="duels">Duels</div>
            <div class="dropdown-item" data-item="skywars">SkyWars</div>
            <hr class="dropdown-hr" />
            <div class="dropdown-item" data-item="arcade">Arcade</div>
            <div class="dropdown-item" data-item="blitz">Blitz</div>
            <div class="dropdown-item" data-item="buildbattle">Build Battle</div>
            <div class="dropdown-item" data-item="classic">Classic Games</div>
            <div class="dropdown-item" data-item="copsandcrims">Cops and Crims</div>
            <div class="dropdown-item" data-item="megawalls">Mega Walls</div>
            <div class="dropdown-item" data-item="murdermystery">Murder Mystery</div>
            <div class="dropdown-item" data-item="pit">Pit</div>
            <div class="dropdown-item" data-item="smashheroes">Smash Heroes</div>
            <div class="dropdown-item" data-item="tntgames">TNT Games</div>
            <div class="dropdown-item" data-item="uhc">UHC</div>
            <div class="dropdown-item" data-item="warlords">Warlords</div>
            <div class="dropdown-item" data-item="woolwars">Wool Wars</div>
            <hr class="dropdown-hr" />
            <div class="dropdown-item" data-item="fishing">Fishing</div>
          </div>
        </div>
      </div>
      <p class="settings-description" data-t="header.settings.default_game_description">Changes the first page that's shown when searching a player.</p>
    </div>

    <div class="mtop mbottom">
      <div class="flex-two-item">
        <p class="flex-two-item-basic about-flex"><img class="settings-icon" src="/img/svg/settings.svg" alt="" /><span class="w600" data-t="header.settings.developer_mode">Developer Mode</span></p>
        <input type="checkbox" id="checkbox-developer-mode" class="switch-checkbox settings-checkbox" data-setting="developer-mode" /><label for="checkbox-developer-mode" class="switch-label"><span class="switch-inner"></span></label>
      </div>
      <p class="settings-description" data-t="header.settings.developer_mode_description">Shows UUIDs and version information.</p>
    </div>
  </div>
</div>

<script>
  let aboutExpanded = false;
  let settingsExpanded = false;
  let cardWizardExpanded = false;
  let currentScope = "player";
  let svgCycleCounter = 0;
  let headerSearchbarSelected = false;
  let cardWizardSettings = {
    game: "NETWORK",
    size: "FULL",
    format: "bbcode",
  };
  let settings;
  var textDirection = "ltr";
  var mobileMode = (document.documentElement.clientWidth < 800);

  let hypixelGames = {
    network: "Network",
    bedwars: "Bed Wars",
    duels: "Duels",
    skywars: "SkyWars",
    arcade: "Arcade",
    blitz: "Blitz",
    buildbattle: "Build Battle",
    classic: "Classic Games",
    copsandcrims: "Cops and Crims",
    murdermystery: "Murder Mystery",
    megawalls: "Mega Walls",
    smashheroes: "Smash Heroes",
    pit: "Pit",
    tntgames: "TNT Games",
    uhc: "UHC",
    woolgames: "Wool Wars",
    warlords: "Warlords",
  }

  let languageCodes = {
    'en-CA': { progress: 100, label: 'English', direction: 'ltr' },
    'ar-SA': { progress: 0, label: 'العربية', direction: 'rtl' },
    'cs-CZ': { progress: 36, label: 'Čeština', direction: 'ltr' },
    'da-DK': { progress: 37, label: 'Dansk', direction: 'ltr' },
    'de-DE': { progress: 39, label: 'Deutsch', direction: 'ltr' },
    'el-GR': { progress: 34, label: 'Ελληνικά', direction: 'ltr' },
    'es-ES': { progress: 100, label: 'Español', direction: 'ltr' },
    'fr-FR': { progress: 82, label: 'Français', direction: 'ltr' },
    'it-IT': { progress: 39, label: 'Italiano', direction: 'ltr' },
    'ja-JP': { progress: 39, label: '日本語', direction: 'ltr' },
    'ko-KR': { progress: 39, label: '한국어', direction: 'ltr' },
    'hu-HU': { progress: 37, label: 'Magyar', direction: 'ltr' },
    'nl-NL': { progress: 38, label: 'Nederlands', direction: 'ltr' },
    'no-NO': { progress: 37, label: 'Norsk', direction: 'ltr' },
    'pl-PL': { progress: 38, label: 'Polski', direction: 'ltr' },
    'pt-PT': { progress: 39, label: 'Português (Portugal)', direction: 'ltr' },
    'pt-BR': { progress: 39, label: 'Português (Brasil)', direction: 'ltr' },
    'ro-RO': { progress: 34, label: 'Română', direction: 'ltr' },
    'ru-RU': { progress: 40, label: 'Русский', direction: 'ltr' },
    'fi-FI': { progress: 39, label: 'Suomi', direction: 'ltr' },
    'sv-SE': { progress: 37, label: 'Svenska', direction: 'ltr' },
    'tr-TR': { progress: 38, label: 'Türkçe', direction: 'ltr' },
    'uk-UA': { progress: 37, label: 'Українська', direction: 'ltr' },
    'zh-CN': { progress: 40, label: '中文（简体）', direction: 'ltr' },
    'zh-TW': { progress: 38, label: '中文（繁體）', direction: 'ltr' },
    'en-PT': { progress: 100, label: 'Pirate English', direction: 'ltr' },
   /*empty: { progress: 100, label: 'empty', direction: 'ltr' }*/
  }

  document.getElementById("header-searchbar-container").addEventListener("mousedown", function () {
    document.getElementById("header-searchbar-container").classList.add("selected");
  });

  document.getElementById("header-searchbar-container").addEventListener("click", function () {
    if (document.activeElement != document.getElementById("searchbar")) {
      document.getElementById("searchbar").focus();
      document.getElementById("searchbar").select();
    }

    headerSearchbarSelected = true;
    document.getElementById("header-searchbar-container").classList.add("selected");
  });

  // Iterate through the languageCodes object and create a dropdown item for each language
  let dropdownLanguage = document.getElementById("dropdown-language");

  for (const [key, value] of Object.entries(languageCodes)) {

    let badgeProgress, badgeProgressTitle;
    badgeProgress = value.progress;
    if(badgeProgress == 100) {
      badgeProgressTitle = "badge-perfect";
    } else if(badgeProgress >= 80) {
      badgeProgressTitle = "badge-high";
    } else if(badgeProgress >= 50) {
      badgeProgressTitle = "badge-medium";
    } else if(badgeProgress > 0) {
      badgeProgressTitle = "badge-low";
    } else {
      badgeProgressTitle = "badge-none";
    }

    document.getElementById("dropdown-language").innerHTML += `<div class="dropdown-item ${key == "en-CA" ? "selected" : ""}" data-item="${key}"><span class="dropdown-item-text">${value.label}</span> <span class="dropdown-item-badge ${badgeProgressTitle}">${badgeProgress}%</span></div>`;
    if (key == "zh-TW" || key == "en-CA") {
      document.getElementById("dropdown-language").innerHTML += `<hr class="dropdown-hr" />`;
    }
  }

  localStorageSettings = localStorage.getItem("settings");
  if (localStorageSettings === null) {
    settings = {
      "quick-mode": true,
      "default-game": "network",
      "developer-mode": false,
      "language": getBestLanguage(),
    };
    localStorage.setItem("settings", JSON.stringify(settings));
  } else {
    settings = JSON.parse(localStorageSettings);
  }

  function showCardWizard(game = "NETWORK") {
    if (!cardWizardExpanded) {
      cardWizardSettings["game"] = game;
      let children = document.getElementById("card-wizard-game").children;
      for (let i = 0; i < children.length; i++) {
        if (children[i].getAttribute("data-item") == game) {
          children[i].classList.add("selected");
          document.getElementById("card-wizard-game-button").innerText = children[i].innerText;
        } else {
          children[i].classList.remove("selected");
        }
      }

      if (typeof playerData !== "undefined" && playerData["name"] !== undefined) {
        document.getElementById("card-wizard-name").value = playerData["name"];
      }
      document.getElementById("modal-card-wizard").classList.remove("unloaded");
      document.getElementById("button-card-wizard").classList.add("selected");
      cardWizardExpanded = true;
    } else {
      document.getElementById("modal-card-wizard").classList.add("unloaded");
      document.getElementById("button-card-wizard").classList.remove("selected");
      cardWizardExpanded = false;
    }
  }

  function changeScope(scope, selectorLocation) {
    currentScope = scope;
    let scopes = ["player", "guild", "achievements", "quests"];

    for (let a of scopes) {
      if (a == currentScope) {
        document.querySelectorAll(`.scope-${a}`).forEach(element => {
          element.classList.add("selected");
        });
      } else {
        document.querySelectorAll(`.scope-${a}`).forEach(element => {
          element.classList.remove("selected");
        });
      }
    }

    let selectorElement;
    if (selectorLocation == "home") {
      selectorElement = document.getElementById("searchbar2");
    } else {
      selectorElement = document.getElementById("searchbar");
    }

    selectorElement.select();

    if (scope == "guild") {
      document.getElementById("searchbar").placeholder = getTranslation(["header", "searchbar", "placeholder_guild"]);
      if (document.getElementById("searchbar2")) {
        document.getElementById("searchbar2").placeholder = getTranslation(["home", "search_guild"]);
      }
    } else {
      document.getElementById("searchbar").placeholder = getTranslation(["header", "searchbar", "placeholder"]);
      if (document.getElementById("searchbar2")) {
        document.getElementById("searchbar2").placeholder = getTranslation(["home", "search"]);
      }
    }
  }

  function showAbout() {
    if (!aboutExpanded) {
      document.getElementById("about").classList.remove("unloaded");
      document.getElementById("button-about").classList.add("selected");
      aboutExpanded = true;
    } else {
      document.getElementById("about").classList.add("unloaded");
      document.getElementById("button-about").classList.remove("selected");
      aboutExpanded = false;
    }
  }

  function showSettings() {
    if (!settingsExpanded) {
      document.getElementById("modal-settings").classList.remove("unloaded");
      document.getElementById("button-settings").classList.add("selected");
      settingsExpanded = true;
    } else {
      document.getElementById("modal-settings").classList.add("unloaded");
      document.getElementById("button-settings").classList.remove("selected");
      settingsExpanded = false;
    }
  }

  document.getElementById("card-wizard-name").addEventListener("keypress", function (event) {
    generateCardLink();
  });

  function generateCardLink() {
    cardName = document.getElementById("card-wizard-name").value;
    cardGame = cardWizardSettings["game"];
    cardSize = cardWizardSettings["size"];
    cardFormat = cardWizardSettings["format"];

    base64Card = btoa(`{"name":"${cardName}","game":"${cardGame}","size":"${cardSize}"}`);

    if (cardName == "") {
      return;
    }

    if (cardFormat == "bbcode") {
      document.getElementById("card-wizard-output").value = `[URL='https://nadeshiko.io/player/${cardName}/${cardGame}'][IMG]https://nadeshiko.io/card/${base64Card}[/IMG][/URL]`;
    } else {
      document.getElementById("card-wizard-output").value = `https://nadeshiko.io/card/${base64Card}`;
    }
  }

  function generateCard() {
    cardName = document.getElementById("card-wizard-name").value;
    cardGame = cardWizardSettings["game"];
    cardSize = cardWizardSettings["size"];
    cardFormat = cardWizardSettings["format"];

    base64Card = btoa(`{"name":"${cardName}","game":"${cardGame}","size":"${cardSize}"}`);

    document.getElementById("progress-ring").style.strokeDasharray = "40";
    document.getElementById("card-wizard-preview-watermark").style.display = "none";
    document.getElementById("progress-ring-svg").style.display = "initial";
    document.getElementById("card-wizard-image").style.display = "none";
    document.getElementById("card-wizard-preview-message").innerText = getTranslation("header.cards.loading_preview");
    document.getElementById("card-wizard-image").src = `https://nadeshiko.io/card/${base64Card}`;
    let svgImageMoving = setInterval(function () {
      svgCycleCounter++;
      document.getElementById("progress-ring").style.strokeDashoffset = `${110 * svgCycleCounter}`;
    }, 1000);
    // When the image loads
    document.getElementById("card-wizard-image").onload = function () {
      clearInterval(svgImageMoving);
      document.getElementById("card-wizard-preview-message").innerText = "";
      document.getElementById("progress-ring-svg").style.display = "none";
      document.getElementById("card-wizard-image").style.display = "initial";
      document.getElementById("card-wizard-preview-watermark").style.display = "flex";
    };
  }

  document.getElementById("searchbar").addEventListener("keypress", function(event) { // Check if the user's typing in the search box
    checkSearchBox(event, this.value);
  });

  function updateSetting(settingKey, settingValue) {
    // Updates a desired setting in the localStorage
    console.log(`Setting ${settingKey} to ${settingValue}`);
    let currentSettings = localStorage.getItem("settings");
    if (currentSettings === null) {
      currentSettings = {};
      console.error("Settings were not found in localStorage; this should never happen!");
    } else {
      currentSettings = JSON.parse(currentSettings);
    }
    currentSettings[settingKey] = settingValue;

    updateSettingFunctionality(settingKey, settingValue);

    settings = currentSettings;
    localStorage.setItem("settings", JSON.stringify(currentSettings));
  }

  function updateSettingFunctionality(setting, settingValue) {
    // Updates the functionality of a changed setting
    if(document.getElementById(`checkbox-${setting}`)) {
      document.getElementById(`checkbox-${setting}`).checked = settingValue;
    }

    if(document.getElementById(`dropdown-${setting}-button`)) {
      let children = document.getElementById(`dropdown-${setting}`).children;
      for (let i = 0; i < children.length; i++) {
        if (children[i].getAttribute("data-item") == settingValue) {
          children[i].classList.add("selected");

          let dropdownItemText = children[i].querySelector(".dropdown-item-text");
          if (dropdownItemText) {
            document.getElementById(`dropdown-${setting}-button`).innerText = dropdownItemText.innerText;
          } else {
            document.getElementById(`dropdown-${setting}-button`).innerText = children[i].innerText;
          }
        } else {
          children[i].classList.remove("selected");
        }
      }
    }

    if (setting == "developer-mode") {
      cardUuid = document.getElementById("card-uuid");
      if (settingValue) {
        if (cardUuid) {
          cardUuid.style.display = "initial";
        }
        document.getElementById("developer-info").style.display = "initial";
      } else {
        if (cardUuid) {
          cardUuid.style.display = "none";
        }
        document.getElementById("developer-info").style.display = "none";
      }
    }
  }

  document.addEventListener("DOMContentLoaded", function () {
    beginGeneration("DOMContentLoaded");
    var checkboxes = document.querySelectorAll(".settings-checkbox");

    checkboxes.forEach(function (checkbox) {
      checkbox.addEventListener("change", function () {
        var settingKey = this.getAttribute("data-setting");
        var settingValue = this.checked;
        updateSetting(settingKey, settingValue);
      });
    });

    for (const [key, value] of Object.entries(settings)) {
      updateSettingFunctionality(key, value);
    }
  });

  document.addEventListener("keydown", function (event) {
    // Close modals on escape key
    if (event.key === "Escape") {
      if (aboutExpanded) {
        document.getElementById("about").classList.add("unloaded");
        document.getElementById("button-about").classList.remove("selected");
        aboutExpanded = false;
      }
      if (settingsExpanded) {
        document.getElementById("modal-settings").classList.add("unloaded");
        document.getElementById("button-settings").classList.remove("selected");
        settingsExpanded = false;
      }
      if (cardWizardExpanded) {
        document.getElementById("modal-card-wizard").classList.add("unloaded");
        document.getElementById("button-card-wizard").classList.remove("selected");
        cardWizardExpanded = false;
      }
    }
    if (event.key === "/" && !isInputField(event.target)) {
      event.preventDefault();
      document.getElementById("searchbar").focus();
    }
  });

  var wordmark = document.querySelector(".wordmark");
  wordmark.addEventListener("mouseenter", function () {
    if (!wordmark.classList.contains("animate")) {
      wordmark.classList.add("animate");
      setTimeout(function () {
        wordmark.classList.remove("animate");
      }, 1800);
    }
  });

  window.onclick = function (event) {
    if (!event.target.closest(".searchbar-container") && headerSearchbarSelected) {
      document.getElementById("header-searchbar-container").classList.remove("selected");
      headerSearchbarSelected = false;
    }

    if (!event.target.closest("#button-about") && !event.target.closest("#about-ui")) {
      if (aboutExpanded) {
        document.getElementById("about").classList.add("unloaded");
        document.getElementById("button-about").classList.remove("selected");
        aboutExpanded = false;
      }
    }

    if (!event.target.closest("#button-settings") && !event.target.closest("#settings-ui")) {
      if (settingsExpanded) {
        document.getElementById("modal-settings").classList.add("unloaded");
        document.getElementById("button-settings").classList.remove("selected");
        settingsExpanded = false;
      }
    }

    if (!event.target.closest("#button-card-wizard") && !event.target.closest("#card-wizard-ui") && !event.target.closest(".general-button")) {
      if (cardWizardExpanded) {
        document.getElementById("modal-card-wizard").classList.add("unloaded");
        document.getElementById("button-card-wizard").classList.remove("selected");
        cardWizardExpanded = false;
      }
    }

    console.log(event.target);
  };

  function isInputField(element) {
    // Determines if the user's actively in an input field (so Quick Mode and easter eggs don't get messed up)
    return element.tagName === "INPUT" || element.tagName === "TEXTAREA" || element.isContentEditable;
  }

  /*
  let tasksBeforeLoadingHeader = ["fetchLanguageFile", "DOMContentLoaded"];

/* Begin generation of the page if all tasks are completed. If not, remove the task from the list of tasks to complete.
 * This is used to ensure that all tasks are completed before the page is generated.
 * @param {string} task - The task that was completed 

function beginGeneration(task) {
  console.log(task);
  if(tasksBeforeLoadingHeader.includes(task)) {
    tasksBeforeLoadingHeader.splice(tasksBeforeLoadingHeader.indexOf(task), 1);
  }

  console.log(`Task ${task} completed; remaining tasks: ${tasksBeforeLoadingHeader}`);

  if(tasksBeforeLoadingHeader.length == 0) {
    updateTranslations();
  }
}*/

  document.addEventListener("click", function (event) {
    let dropdownButton = event.target.closest(".dropdown-button");
    if (dropdownButton) {
      console.log("Dropdown button clicked");
      var dropdownContent = dropdownButton.nextElementSibling;

      if (dropdownContent.classList.contains("unloaded")) {
        // If not visible
        // Reset styles first
        dropdownContent.style.insetInlineEnd = "0px";
        dropdownContent.style.insetInlineStart = "auto";
        dropdownContent.style.bottom = "auto";
        dropdownContent.style.top = "auto";

        // Get the bounding rectangle of the dropdown
        var dropdownRect = dropdownContent.getBoundingClientRect();

        if (dropdownContent.classList.contains("dropdown-chip") && !dropdownContent.classList.contains("dropdown-header")) {
          chipBox = dropdownContent.parentElement.parentElement.parentElement.parentElement;
          dropdownContent.style.overflowY = "scroll";

          if (chipBox) {
            dropdownContent.style.maxHeight = `calc(${getComputedStyle(chipBox).height} - 65px)`;
          } else {
            console.error("Chip box missing!");
          }
        }

        dropdownRect = dropdownContent.getBoundingClientRect();

        // Check bottom edge
        if ((window.innerHeight - dropdownRect.bottom < 30 || mobileMode) && !dropdownContent.classList.contains("dropdown-chip")) {
          // Adjust it upwards if it goes off bottom or in mobile mode
          dropdownContent.style.bottom = "100%";
          dropdownContent.style.top = "auto";
        } else {
          dropdownContent.style.bottom = "auto";
          dropdownContent.style.top = "100%";
        }

        dropdownRect = dropdownContent.getBoundingClientRect();
        if (dropdownRect.top < 0 && dropdownContent.classList.contains("dropdown-games")) {
          // If it still doesn't fit, call for desperate measures
          dropdownContent.style.top = "100%";
          dropdownContent.style.bottom = "auto";
          dropdownContent.style.maxHeight = window.innerHeight * 0.7 + "px";
          dropdownContent.style.overflowY = "scroll";
        }

        // if (window.innerWidth - dropdownRect.right < 30 && !dropdownContent.classList.contains("dropdown-games")) {
        //   // Check left edge
        //   dropdownContent.style.left = "auto"; // Adjust it rightwards if it goes off right edge
        //   dropdownContent.style.right = "0";
        // } else {
        //   dropdownContent.style.left = "0";
        //   dropdownContent.style.right = "auto";
        // }
      }
      dropdownContent.classList.toggle("unloaded");
    }

    // If the event or any of its ancestors (parent, grandparent, etc). has a class of dropdown-item, then it's a dropdown item
    let selectedItem = event.target.closest(".dropdown-item");
    if (selectedItem) {
      const dropdownContainer = selectedItem.closest(".dropdown-content");
      const gameName = dropdownContainer.dataset.game;
      const modifyId = dropdownContainer.dataset.modify;
      const selectedItemText = selectedItem.dataset.item;

      const button = dropdownContainer.previousElementSibling; // Selects the button
      if (button.classList.contains("chip-dropdown-button")) {
        
        let dropdownItemText = selectedItem.querySelector(".dropdown-item-text");
        if (dropdownItemText) {
          button.innerHTML = DOMPurify.sanitize(dropdownItemText.innerHTML);

        } else {
          button.innerHTML = DOMPurify.sanitize(selectedItem.innerHTML);
          console.warn("Dropdown item text not found; using innerHTML instead");
        }

        if (!button.classList.contains("card-wizard-button")) {
          button.style.width = "auto";
          var naturalWidth = button.clientWidth + 1; // Get the natural content width

          // Reset to the initial width then set to natural width to enable transition
          button.style.width = ""; // Remove any inline width style
          getComputedStyle(button).width; // Force reflow to clear any previous transition
          button.style.width = naturalWidth + "px";
        }
      }
      // Call the update function
      updateChipStats(selectedItemText, modifyId, gameName);

      dropdownContainer.querySelectorAll(".dropdown-item").forEach((div) => {
        div.classList.remove("selected");
      });
      selectedItem.classList.add("selected"); // Selects the clicked item
    }
  });

  document.addEventListener("keydown", function (event) {
    // Close all dropdowns if escape pressed
    if (event.key === "Escape") {
      var dropdowns = document.getElementsByClassName("dropdown-content");
      for (var i = 0; i < dropdowns.length; i++) {
        var openDropdown = dropdowns[i];
        if (!openDropdown.classList.contains("unloaded")) {
          openDropdown.classList.add("unloaded");
        }
      }
    }
  });

  window.addEventListener("click", function (event) {
    if (!event.target.closest(".dropdown-button")) {
      // If the doesn't click on a dropdown button, close all dropdowns
      console.log(event.target);
      var dropdowns = document.getElementsByClassName("dropdown-content");
      for (var i = 0; i < dropdowns.length; i++) {
        var openDropdown = dropdowns[i];
        if (!openDropdown.classList.contains("unloaded")) {
          openDropdown.classList.add("unloaded");
        }
      }
    }
  });
</script>
